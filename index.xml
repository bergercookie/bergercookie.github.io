<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Bergercookie's Thoughtstream</title><link>https://bergercookie.dev/</link><description>Recent content on Bergercookie's Thoughtstream</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://bergercookie.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>5 Albert Plugins to 5 Workflow Issues</title><link>https://bergercookie.dev/post/5-albert-plugins-to-5-common-problems/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/post/5-albert-plugins-to-5-common-problems/</guid><description>This is part two of my articles on the Albert launcher. Read the first part here
This post outlines 5 common issues that I had been facing during my day-to-day development and the solutions that I came up with via 5 Albert plugins respectively.
TL;DR The purpose of these plugins is a) to avoid context-switching and b) have a single tool with a single interface instead X different tools with their own corresponding interfaces.</description><content:encoded><![CDATA[<p>This is part two of my articles on the Albert launcher. Read the first part
<a href="/post/albert-plugins">here</a></p>
<p>This post outlines 5 common issues that I had been facing during my day-to-day
development and the solutions that I came up with via 5 Albert plugins
respectively.</p>
<h2 id="tldr">TL;DR</h2>
<p>The purpose of these plugins is a) to avoid context-switching and b) have a
single tool with a single interface instead X different tools with their own
corresponding interfaces.</p>
<p>All are hosted under the same github repo:
<a href="https://github.com/bergercookie/awesome-albert-plugins">awesome-albert-plugins</a>
on github and here are links to each one of the plugins that I&rsquo;ll be discussing
below:</p>
<ul>
<li><a href="https://github.com/bergercookie/awesome-albert-plugins/tree/master/plugins/tldr_pages">TLDR pages</a></li>
<li><a href="https://github.com/bergercookie/awesome-albert-plugins/tree/master/plugins/scratchpad">Scratchpad</a></li>
<li><a href="https://github.com/bergercookie/awesome-albert-plugins#plugins">Googler-enabled plugins</a></li>
<li><a href="https://github.com/bergercookie/awesome-albert-plugins/tree/master/plugins/google_translate">google_translate</a> | <a href="https://github.com/bergercookie/awesome-albert-plugins/tree/master/plugins/words">words</a></li>
<li><a href="https://github.com/bergercookie/awesome-albert-plugins/tree/master/plugins/saxophone">Saxophone</a></li>
</ul>
<h2 id="-looking-up-command--tool-usage-instructions">🔎 Looking up command / tool usage instructions</h2>
<p>During your daily routine, you&rsquo;ll want to look up how to call a certain tool,
say recursively compress the contents of a directory using
<a href="https://en.wikipedia.org/wiki/Bzip2">bzip</a>, or create a new virtual environment
to work in using <a href="https://python-poetry.org/">Poetry</a>. You may either haven&rsquo;t
used these tools at all, or are not able to recall the exact flags for the task
at hand. Two common ways of dealing with this are:</p>
<ul>
<li>Google it! You&rsquo;ll then most probably want to move to a stackoverflow answer,
copy-paste a command that seems to solve your issue, and then adjust it
accordingly. This involves a few browser redirections (at least <code>google.com</code>
-&gt; <code>stackoverflow.com</code>), as well as the overhead of selecting the right post
and finding the right answer to your question.</li>
<li>Read the manpage / help page of the tool, if it has one. This resource may be
more rigorous but it will also take more time to find the documentation section
that you&rsquo;re interested in.</li>
</ul>
<p>A more effective approach to this would be to use a software such as
<a href="https://github.com/tldr-pages/tldr">tldr</a>, <a href="http://bropages.org/">bro pages</a>,
or <a href="https://github.com/cheat/cheat">cheat</a>. More specifically, <code>tldr</code> allows
you to look up the most common usecases for a wide variety of tools, all without
leaving your command line. It&rsquo;s also easily extensible, allowing you to add more
examples to specific tools, or adding documentation and examples for new tools.</p>
<p><img loading="lazy" src="/images/albert-demos2/tldr.svg" alt="tldr"  />
</p>
<p>However even in this case you have to switch context from what you&rsquo;re currently
doing; If you&rsquo;re working e.g., on VS Code, you have to start a new terminal,
look up the tool that you want, copy the usecase that you&rsquo;re interested in,
paste and modify it accordingly. We can do better than that.</p>
<p>Enter the <a href="https://github.com/bergercookie/awesome-albert-plugins/tree/master/plugins/tldr_pages">tldr_pages albert
plugin</a></p>
<p><img loading="lazy" src="/images/albert-demos2/tldr-albert.gif" alt="tldr-pages-albert"  />
</p>
<p>It allows you to do fuzzy autocompletion-enabled search on any tldr command and
copy its content on ENTER. In addition you can also quickly navigate to the
appropriate webpage if you want to read more about the tool at hand, or fall
back to a google search if that&rsquo;s not good enough.</p>
<h2 id="-taking-notes-instantly---refactor-later">📓 Taking notes instantly - Refactor later</h2>
<p>Whether I&rsquo;m either reading articles on Wikipedia, watching videos on YouTube, or
doing pretty much anything on the computer that involves a bit of learning, I
like to take notes. A good approach to this would be to split your screen
vertically and have the browser on one side and your favorite editor on the
other. Then you would create a new text file for every new item you &rsquo;re
studying, add a title, then add your notes or copy paste accordingly.</p>
<p><img loading="lazy" src="/images/albert-demos2/scratchpad1.png" alt="scratchpad1"  />
</p>
<p>This involves a few steps in the process that can be improved:</p>
<ul>
<li>
<p>At that particular moment I don&rsquo;t want to have to:</p>
<ul>
<li>create a new file</li>
<li>think of where to place it in my hierarchy of notes</li>
<li>add the appropriate title</li>
<li>add structure to the note that I&rsquo;m taking</li>
</ul>
<p>I&rsquo;d rather spend this time just recording my thoughts and reading through the
actual Wikipedia page.</p>
</li>
<li>
<p>I don&rsquo;t want to switch between reading the resource and recording my notes.</p>
</li>
</ul>
<p>To deal with this, I&rsquo;m using a very simple plugin called <code>scratchpad</code>.</p>
<p><img loading="lazy" src="/images/albert-demos2/scratchpad2.png" alt="scratchpad2"  />
</p>
<p>Its logic is super simple. You write some text to it and it writes it to a file;
The same file all the time. You specify the path to that file the first time you
trigger the plugin.</p>
<p><img loading="lazy" src="/images/albert-demos2/scratchpad3.png" alt="scratchpad3"  />
</p>
<p>Each text is saved there and by default it&rsquo;s formatted with a maximum width of
80 characters to assist in later potential reformatting. A blank line is
inserted between successive entries to the file and it allows to add a separator
if you start adding notes about a new subject</p>
<p><img loading="lazy" src="/images/albert-demos2/scratchpad3.png" alt="scratchpad3"  />
</p>
<p>The plugin gets triggered either explicitly using <code>s&lt;space&gt;</code> or automatically
if your Albert query is longer than 5 words. This process allows you to record
anything you want and then sort them out later (i.e., place them into separate
files, structure them better, etc.).</p>
<p><img loading="lazy" src="/images/albert-demos2/scratchpad4.png" alt="scratchpad4"  />
</p>
<p>Here&rsquo;s how your scratchpad looks like after a bunch of additions from two
different pages:</p>
<p><img loading="lazy" src="/images/albert-demos2/scratchpad-final-result.png" alt="scratchpad-final-result"  />
</p>
<h2 id="-adding-links-during-text-editing">🔗 Adding Links during Text Editing</h2>
<p>Another common issue is inserting links to other pages or documentation while
you&rsquo;re creating or editing an existing page. That may be a markdown document for
your GitHub repo, a Confluence page or Jira issue in your day job or a report
you&rsquo;re righting in LibreOffice. Most times you&rsquo;d have to stop what you&rsquo;re doing,
launch your browser, search on google the thing you&rsquo;re interested in and
navigate to it, and finally, copy the link displayed in your browser prompt</p>
<p>Again, as with the previous issues discussed this approach takes too much time
<em>and</em> makes you context switch from the thing you&rsquo;re currently doing.</p>
<p>Instead use <a href="https://github.com/jarun/googler">googler</a> or even better one of
the many googler-enabled plugins in the
<a href="https://github.com/bergercookie/awesome-albert-plugins">awesome-albert-plugins</a>
repo. You can basically use the
<a href="https://github.com/bergercookie/awesome-albert-plugins/blob/master/create_googler_plugins.py">create_googler_plugins.py</a>
script after you&rsquo;ve downloaded the repository to several Albert plugins, each
one responsible for searching in a single website. So for example, you can use
the trigger <code>gg</code> to search and get results for Google, or <code>gh</code> to search on
GitHub or <code>imdb</code> to search on IMDB.</p>
<p>Here&rsquo;s how it looks:</p>
<p>| <img loading="lazy" src="/images/albert-demos2/albert-suggestions-demo.gif" alt=""  />
 | <img loading="lazy" src="/images/albert-demos2/albert-suggestions-demo2.gif" alt=""  />
 |
| <img loading="lazy" src="/images/albert-demos2/albert-suggestions-demo3.gif" alt=""  />
 | <img loading="lazy" src="/images/albert-demos2/search_plugins.png" alt=""  />
 |</p>
<p>Using one of these plugins, for example the one that searches on Google, you can
search for and copy the link to the resource you&rsquo;re interested in without
leaving the document you&rsquo;re currently editing.</p>
<p><img loading="lazy" src="/images/albert-demos2/search-results.png" alt=""  />
</p>
<h2 id="-translating-text">🈯 Translating Text</h2>
<p>Again, same premise as in the previous cases. You&rsquo;re reading an article or
watching a movie and you don&rsquo;t know a word or a phrase written there. It&rsquo;s too
much of a hassle to open a new browser tab, go to Google Translate to do the
translation.</p>
<p>Use the <code>google_translate</code> plugin in conjunction with the <code>word</code> plugin.</p>
<p>| <img loading="lazy" src="/images/albert-demos2/google_translate.png" alt=""  />
 | <img loading="lazy" src="/images/albert-demos2/word.png" alt=""  />
 |</p>
<p>The <code>google_translate</code> plugin will translate the word from the source language
to the destination language while you can also use the <code>auto</code> source to enable
autodetection.</p>
<p>The <code>word</code> plugin on the other hand will give you the definition of the given
word along with synonyms and antonyms.</p>
<h2 id="-playing-radio-streams">🎷 Playing Radio Streams</h2>
<p>This last plugin allows you to play and alternate between different stations
easily and without jumping around different webpages to do so.</p>
<p>It&rsquo;s called <code>saxophone</code>, and this is how its interface looks.</p>
<p><img loading="lazy" src="/images/albert-demos2/saxophone.png" alt=""  />
</p>
<p>There&rsquo;s a bunch of preconfigured radios, specified in the
<code>config/saxophone.json</code> file. You can easily extend that list to include your
preferences as well.</p>
<p>Under the hood it uses the <a href="https://wiki.videolan.org/documentation:modules/rc/">VLC Remote-Control
Interface</a>.</p>
]]></content:encoded></item><item><title>A Mind Map of Mental Models</title><link>https://bergercookie.dev/post/mental-models/</link><pubDate>Sun, 27 Dec 2020 17:29:00 +0000</pubDate><guid>https://bergercookie.dev/post/mental-models/</guid><description>Behavioral psychology and the works of Kanheman and Tversky has been a hobby of mine for quite some time now. Same goes for podcasts like Freakonomics and Choiceology. Given that, it&amp;rsquo;s only natural to come across the Farmam Street blog by Shane Parish and more specifically, the article on Mental Models.
Mental models are heuristics that simplify reality and help you navigate the world around you. For example they may help you make better decisions, explain other people&amp;rsquo;s actions, close deals at work or study more efficiently for an exam.</description><content:encoded><![CDATA[<p>Behavioral psychology and the works of Kanheman and Tversky has been a hobby
of mine for quite some time now. Same goes for podcasts like
<a href="https://freakonomics.com/">Freakonomics</a> and
<a href="https://www.schwab.com/resource-center/insights/podcast">Choiceology</a>. Given
that, it&rsquo;s only natural to come across the <a href="https://fs.blog/">Farmam Street</a>
blog by Shane Parish and more specifically, <a href="https://fs.blog/mental-models/">the article on Mental
Models</a>.</p>
<p>Mental models are heuristics that simplify reality and help you navigate the
world around you. For example they may help you make better decisions, explain
other people&rsquo;s actions, close deals at work or study more efficiently for an
exam.</p>
<p>The Farmam Street Post I linked above provides quite an detailed introduction
to many mental models that you can use on an everyday basis. However because of
that breadth (it lists over 70 different models along with a complete
description for each one) it&rsquo;s quite hard to read through all of them.</p>
<p>Instead, I created a mind map for the same content which puts all the models
into groups and in a single page. Have a look below, and let me know what you
think:</p>
<iframe
  width="1280"
  height="720"
  src="https://embed.coggle.it/diagram/X-g-vCrTPmLCD_K7/935cb8fe7e0d3f4288c234663aeed31277eb3c390388704e6f942c0e00c2af5d"
  frameborder="0"
  allowfullscreen
>
</iframe>

]]></content:encoded></item><item><title>Cracking the OpenCV Applications Course - Project 1</title><link>https://bergercookie.dev/post/opencv-project1/</link><pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/post/opencv-project1/</guid><description>This is a writeup of my first assignment for the &amp;ldquo;Computer Vision II: Applications&amp;rdquo; course.
For this assignment, I&amp;rsquo;m given an image of a girl, and I have to add 2 new features to it:
Apply lipstick Applying blush Here&amp;rsquo;s the original image that we&amp;rsquo;ll be working on:
Initialisation actions We first load and initialise all the necessary modules and objects that we&amp;rsquo;ll need
1 2 3 4 5 6 7 8 # various imports import cv2, sys, dlib, time, math import numpy as np import matplotlib.</description><content:encoded><![CDATA[<p>This is a writeup of my first assignment for the &ldquo;Computer Vision II: Applications&rdquo; course.</p>
<p>For this assignment, I&rsquo;m given an image of a girl, and I have to add 2 new
features to it:</p>
<ol>
<li>Apply lipstick</li>
<li>Applying blush</li>
</ol>
<p>Here&rsquo;s the original image that we&rsquo;ll be working on:</p>



<center>
<img src="/images/opencv/girl-no-makeup.jpg" alt="Original picture of girl" width="400" height="400">
</center>


<h2 id="initialisation-actions">Initialisation actions</h2>
<p>We first load and initialise all the necessary modules and objects that we&rsquo;ll
need</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># various imports</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">import</span> cv2<span style="color:#f92672">,</span> sys<span style="color:#f92672">,</span> dlib<span style="color:#f92672">,</span> time<span style="color:#f92672">,</span> math
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">from</span> pathlib <span style="color:#f92672">import</span> Path
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Tuple
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">from</span> cv_helpers <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">from</span> helpers <span style="color:#f92672">import</span> <span style="color:#f92672">*</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>Note that <code>cv_helpers</code> and <code>helpers</code> are personal modules, mainly for debugging
/ visualisation purposes.</p>
<p>We then load the dlib 68 point face detector:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  path <span style="color:#f92672">=</span> Path(__file__)<span style="color:#f92672">.</span>absolute()<span style="color:#f92672">.</span>parent
</span></span><span style="display:flex;"><span>  predictor_path <span style="color:#f92672">=</span>  path <span style="color:#f92672">/</span> <span style="color:#e6db74">&#34;shape_predictor_68_face_landmarks.dat&#34;</span>
</span></span><span style="display:flex;"><span>  faceDetector <span style="color:#f92672">=</span> dlib<span style="color:#f92672">.</span>get_frontal_face_detector()
</span></span><span style="display:flex;"><span>  landmarkDetector <span style="color:#f92672">=</span> dlib<span style="color:#f92672">.</span>shape_predictor(str(predictor_path))</span></span></code></pre></td></tr></table>
</div>
</div>
<p>Notice that we&rsquo;re taking the absolute path to the trained predictor; That&rsquo;s the
correct way of opening files since this allows you to run the application
regardless your working directory. We then load the image via the <code>cv2.imread</code>
function, taking care of the BGR -&gt; RGB conversion since OpenCV uses the <code>BGR</code>
format and finally we detect the face landmarks:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  im <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>imread(str(path <span style="color:#f92672">/</span> <span style="color:#e6db74">&#34;girl-no-makeup.jpg&#34;</span>))
</span></span><span style="display:flex;"><span>  imDlib <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>cvtColor(im, cv2<span style="color:#f92672">.</span>COLOR_BGR2RGB)
</span></span><span style="display:flex;"><span>  landmarks <span style="color:#f92672">=</span> fbc<span style="color:#f92672">.</span>getLandmarks(faceDetector, landmarkDetector, im)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>To verify that we&rsquo;ve loaded the image and we&rsquo;ve detected the required features
succesfully, we can plot the original image, along with it superimposed by the
detected features. To do that, we&rsquo;ll make use of the following helper functions:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mark_points_in_img</span>(img: np<span style="color:#f92672">.</span>ndarray, points, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>) <span style="color:#f92672">-&gt;</span> np<span style="color:#f92672">.</span>ndarray:
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      Each one of the points in the `points` sequence is marked by a circle and its corresponding
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      index in text.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> inplace:
</span></span><span style="display:flex;"><span>          img <span style="color:#f92672">=</span> img<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> i, la <span style="color:#f92672">in</span> enumerate(points):
</span></span><span style="display:flex;"><span>          cv2<span style="color:#f92672">.</span>circle(img, la, radius<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>          cv2<span style="color:#f92672">.</span>putText(img, str(i), la, cv2<span style="color:#f92672">.</span>FONT_HERSHEY_SIMPLEX, <span style="color:#ae81ff">0.5</span>, (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">255</span>), <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> img
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_num_rows_cols</span>(size: int, max_cols: int <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">-&gt;</span> Tuple[int, int]:
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;&#34;&#34;Format `size` elements into an xy grid.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &gt;&gt;&gt; get_num_rows_cols(2, max_cols=4)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      (1, 2)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &gt;&gt;&gt; get_num_rows_cols(4, max_cols=4)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      (1, 4)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &gt;&gt;&gt; get_num_rows_cols(5, max_cols=4)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      (2, 4)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &gt;&gt;&gt; get_num_rows_cols(10, max_cols=4)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      (3, 4)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &gt;&gt;&gt; get_num_rows_cols(6, max_cols=2)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      (3, 2)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      ncols <span style="color:#f92672">=</span> min(size, max_cols)
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> size <span style="color:#f92672">%</span> ncols <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>          nrows <span style="color:#f92672">=</span> size <span style="color:#f92672">//</span> ncols
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>          nrows <span style="color:#f92672">=</span> int(np<span style="color:#f92672">.</span>ceil(size <span style="color:#f92672">/</span> ncols))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> nrows, ncols
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">plt_imshow</span>(<span style="color:#f92672">*</span>imgs, is_bgr<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>):
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      Render the given images in matplotlib. The function will automatically arrange them in a
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      grid layout if they are more than 2.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> is_bgr:
</span></span><span style="display:flex;"><span>          imgs <span style="color:#f92672">=</span> [cv2<span style="color:#f92672">.</span>cvtColor(img, cv2<span style="color:#f92672">.</span>COLOR_BGR2RGB) <span style="color:#66d9ef">for</span> img <span style="color:#f92672">in</span> imgs]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> imgs:
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      n <span style="color:#f92672">=</span> len(imgs)
</span></span><span style="display:flex;"><span>      rows, cols <span style="color:#f92672">=</span> get_num_rows_cols(n, max_cols<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>      fig <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> i, img <span style="color:#f92672">in</span> enumerate(imgs):
</span></span><span style="display:flex;"><span>          fig<span style="color:#f92672">.</span>add_subplot(rows, cols, i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>          plt<span style="color:#f92672">.</span>imshow(img)
</span></span><span style="display:flex;"><span>      plt<span style="color:#f92672">.</span>show()</span></span></code></pre></td></tr></table>
</div>
</div>
<p>And now to put these functions to good use:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># Copy the image - keep the original intact</span>
</span></span><span style="display:flex;"><span>  im1 <span style="color:#f92672">=</span> mark_points_in_img(imDlib, landmarks, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>  plt_imshow(imDlib, im1)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>And here&rsquo;s the result:</p>
<p><img loading="lazy" src="/images/opencv/proj1-detected-landmarks.png" alt="original image"  />
</p>
<h2 id="applying-lipstick">Applying lipstick</h2>
<p>To apply lipstick to the girl in the image, we follow the steps below:</p>
<ol>
<li>Identify the list of landmarks that comprise the lips area as well as the
area that corresponds to the mouth cavity (in case the person has slightly
opened their mouth).</li>
<li>Initialise a new black image, that has the same size as the original one,
and has a solid red color at the lips.</li>
<li>Slightly blur the latter, in order to soften its edges and hide potential
defects in the end result</li>
<li>Finally do an alpha-blend of the two images (original girl image, lipsticks
only image) giving a higher weight to the girl</li>
</ol>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  im_lipstick <span style="color:#f92672">=</span> im<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># gather the indexes of the outer and inner  lip cavities</span>
</span></span><span style="display:flex;"><span>  lips_outer_idx <span style="color:#f92672">=</span> range(<span style="color:#ae81ff">48</span>, <span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span>  lips_outer_landmarks <span style="color:#f92672">=</span> [landmarks[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> lips_outer_idx]
</span></span><span style="display:flex;"><span>  lips_inner_idx <span style="color:#f92672">=</span> range(<span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">67</span>)
</span></span><span style="display:flex;"><span>  lips_inner_landmarks <span style="color:#f92672">=</span> [landmarks[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> lips_inner_idx]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># create lipstick-only area</span>
</span></span><span style="display:flex;"><span>  im_lipstick_only <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros(im_lipstick<span style="color:#f92672">.</span>shape, dtype<span style="color:#f92672">=</span>im_lipstick<span style="color:#f92672">.</span>dtype)
</span></span><span style="display:flex;"><span>  cv2<span style="color:#f92672">.</span>fillPoly(
</span></span><span style="display:flex;"><span>      im_lipstick_only, np<span style="color:#f92672">.</span>array([lips_outer_landmarks], np<span style="color:#f92672">.</span>int32), color<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">255</span>),
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>  cv2<span style="color:#f92672">.</span>fillConvexPoly(  <span style="color:#75715e"># mouth cavity</span>
</span></span><span style="display:flex;"><span>      im_lipstick_only, np<span style="color:#f92672">.</span>array(lips_inner_landmarks, np<span style="color:#f92672">.</span>int32), color<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>),
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># do a minor blur to sotften the edges</span>
</span></span><span style="display:flex;"><span>  im_lipstick_only <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>blur(im_lipstick_only, (<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.8</span>
</span></span><span style="display:flex;"><span>  im_lipstick <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>addWeighted(im, alpha, im_lipstick_only, <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> alpha, <span style="color:#ae81ff">0.0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  plt_imshow(im, im_lipstick, is_bgr<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>Here&rsquo;s how the girl looks after having applied the lipstick:</p>
<p><img loading="lazy" src="/images/opencv/proj1-lipstick.png" alt="original image"  />
</p>
<h2 id="applying-blush">Applying blush</h2>
<p>Let&rsquo;s start where we left off at the previous section,</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  im <span style="color:#f92672">=</span> im_lipstick
</span></span><span style="display:flex;"><span>  im <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>cvtColor(im, cv2<span style="color:#f92672">.</span>COLOR_BGR2RGB)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>Our goal is to use a second image, let&rsquo;s call it <code>im2</code> which has intense blush
characteristics, and try to somehow blend it with our original image, <code>im</code>. To
do that, we first normalise both <code>im</code> and <code>im2</code> to a specifc size and using
specific features and distances as reference for  the normalisation. For this,
as in the first step, we will use the <code>fbc.normalizeImagesAndLandmarks</code> function
provided in the course material. However, instead of using the corners of the
eyes, as the points for normalisation , we will instead use the distance between
the cheek bones. Thus we add an extra class to encode this extra information,
and we change the signature of the <code>fbc.normalizeImagesAndLandmarks</code> function as
follows:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PointsForNormalisation</span>:
</span></span><span style="display:flex;"><span>      loc0: Tuple[int, int] <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>      loc1: Tuple[int, int] <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>      new_loc0: Tuple[int, int]  <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>      new_loc1: Tuple[int, int]  <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">normalizeImagesAndLandmarks</span>(outSize: Tuple[int, int], imIn, pointsIn: np<span style="color:#f92672">.</span>ndarray,
</span></span><span style="display:flex;"><span>                                  points_for_normalisation:
</span></span><span style="display:flex;"><span>                                  Optional[PointsForNormalisation]<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> points_for_normalisation:
</span></span><span style="display:flex;"><span>          ps <span style="color:#f92672">=</span> points_for_normalisation
</span></span><span style="display:flex;"><span>          loc0 <span style="color:#f92672">=</span> ps<span style="color:#f92672">.</span>loc0
</span></span><span style="display:flex;"><span>          loc1 <span style="color:#f92672">=</span> ps<span style="color:#f92672">.</span>loc1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          new_loc0 <span style="color:#f92672">=</span> ps<span style="color:#f92672">.</span>new_loc0
</span></span><span style="display:flex;"><span>          new_loc1 <span style="color:#f92672">=</span> ps<span style="color:#f92672">.</span>new_loc1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># business as usual</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># use corners of eyes</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>We then execute the normalisation as follows:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  dst_shape <span style="color:#f92672">=</span> (<span style="color:#ae81ff">600</span>, <span style="color:#ae81ff">600</span>)
</span></span><span style="display:flex;"><span>  landmarks_arr <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(landmarks)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_ps_for_cheeks</span>(landmarks: np<span style="color:#f92672">.</span>ndarray, w, h) <span style="color:#f92672">-&gt;</span> fbc<span style="color:#f92672">.</span>PointsForNormalisation:
</span></span><span style="display:flex;"><span>      ps <span style="color:#f92672">=</span> fbc<span style="color:#f92672">.</span>PointsForNormalisation()
</span></span><span style="display:flex;"><span>      ps<span style="color:#f92672">.</span>loc0 <span style="color:#f92672">=</span> landmarks[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>      ps<span style="color:#f92672">.</span>loc1 <span style="color:#f92672">=</span> landmarks[<span style="color:#ae81ff">14</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      ps<span style="color:#f92672">.</span>new_loc0 <span style="color:#f92672">=</span> (np<span style="color:#f92672">.</span>int(<span style="color:#ae81ff">0.15</span> <span style="color:#f92672">*</span> w), np<span style="color:#f92672">.</span>int(h <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>      ps<span style="color:#f92672">.</span>new_loc1 <span style="color:#f92672">=</span> (np<span style="color:#f92672">.</span>int(<span style="color:#ae81ff">0.85</span> <span style="color:#f92672">*</span> w), np<span style="color:#f92672">.</span>int(h <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> ps
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  im, landmarks_arr <span style="color:#f92672">=</span> fbc<span style="color:#f92672">.</span>normalizeImagesAndLandmarks(dst_shape, im, landmarks_arr,
</span></span><span style="display:flex;"><span>                                                      get_ps_for_cheeks(landmarks_arr,
</span></span><span style="display:flex;"><span>                                                                         dst_shape[<span style="color:#ae81ff">0</span>],
</span></span><span style="display:flex;"><span>                                                                         dst_shape[<span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>  landmarks <span style="color:#f92672">=</span> [(la[<span style="color:#ae81ff">0</span>], la[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">for</span> la <span style="color:#f92672">in</span> landmarks_arr]
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">assert</span> im<span style="color:#f92672">.</span>shape[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> dst_shape
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># load, find landmarks in and reshape second image</span>
</span></span><span style="display:flex;"><span>  im2_orig <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>imread(str(path <span style="color:#f92672">/</span> <span style="color:#e6db74">&#34;makeup2.jpeg&#34;</span>))
</span></span><span style="display:flex;"><span>  im2 <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>cvtColor(im2, cv2<span style="color:#f92672">.</span>COLOR_BGR2RGB)
</span></span><span style="display:flex;"><span>  landmarks2 <span style="color:#f92672">=</span> fbc<span style="color:#f92672">.</span>getLandmarks(faceDetector, landmarkDetector, im2)
</span></span><span style="display:flex;"><span>  landmarks_arr2 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(landmarks2)
</span></span><span style="display:flex;"><span>  im2, landmarks_arr2 <span style="color:#f92672">=</span> fbc<span style="color:#f92672">.</span>normalizeImagesAndLandmarks(dst_shape, im2, landmarks_arr2,
</span></span><span style="display:flex;"><span>                                                        get_ps_for_cheeks(landmarks_arr2,
</span></span><span style="display:flex;"><span>                                                                           dst_shape[<span style="color:#ae81ff">0</span>],
</span></span><span style="display:flex;"><span>                                                                           dst_shape[<span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>  landmarks2 <span style="color:#f92672">=</span> [(la[<span style="color:#ae81ff">0</span>], la[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">for</span> la <span style="color:#f92672">in</span> landmarks_arr2]
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">assert</span> im2<span style="color:#f92672">.</span>shape[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> dst_shape</span></span></code></pre></td></tr></table>
</div>
</div>
<p>Let&rsquo;s verify that the normalisation works as expected:
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  plt_imshow(
</span></span><span style="display:flex;"><span>      cv2<span style="color:#f92672">.</span>cvtColor(im_lipstick, cv2<span style="color:#f92672">.</span>COLOR_BGR2RGB),
</span></span><span style="display:flex;"><span>      cv2<span style="color:#f92672">.</span>cvtColor(im2_orig, cv2<span style="color:#f92672">.</span>COLOR_BGR2RGB),
</span></span><span style="display:flex;"><span>      im,
</span></span><span style="display:flex;"><span>      im2,
</span></span><span style="display:flex;"><span>  )</span></span></code></pre></td></tr></table>
</div>
</div></p>
<p><img loading="lazy" src="/images/opencv/proj1-normalisation.png" alt="original image"  />
</p>
<p>Initially I thought that doing delaunay triangulation and then warping the
triangles around the cheeks area would solve it, however, as demonstrated in the
course materials, because of the different texture and skin color, this doesn&rsquo;t
work and the end result doesn&rsquo;t look good. I then decided to opt for two
seamless cloning operations, one for each cheek, and circular patches in the
cheeks as the mask.</p>
<p>Here&rsquo;s how I finally implemented it:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># Find the center of each cheek - that&#39;s where the kernel of the blush will be</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_cheek_loc</span>(a: tuple, b: tuple):
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># return (a[0] + b[0])//2, (a[1] + b[1])//2</span>
</span></span><span style="display:flex;"><span>      xdist <span style="color:#f92672">=</span> b[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> a[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>      ydist <span style="color:#f92672">=</span> b[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> a[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      x <span style="color:#f92672">=</span> int(a[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> xdist)
</span></span><span style="display:flex;"><span>      y <span style="color:#f92672">=</span> int(a[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> ydist)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> x, y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  cheek1_xy <span style="color:#f92672">=</span> get_cheek_loc(landmarks[<span style="color:#ae81ff">2</span>], landmarks[<span style="color:#ae81ff">29</span>])
</span></span><span style="display:flex;"><span>  cheek2_xy <span style="color:#f92672">=</span> get_cheek_loc(landmarks[<span style="color:#ae81ff">14</span>], landmarks[<span style="color:#ae81ff">29</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># create the masks</span>
</span></span><span style="display:flex;"><span>  mask1 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros(im<span style="color:#f92672">.</span>shape, im<span style="color:#f92672">.</span>dtype)
</span></span><span style="display:flex;"><span>  mask2 <span style="color:#f92672">=</span> mask1<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>  cv2<span style="color:#f92672">.</span>circle(mask1, cheek1_xy, radius<span style="color:#f92672">=</span><span style="color:#ae81ff">50</span>, color<span style="color:#f92672">=</span>(<span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>), thickness<span style="color:#f92672">=</span>cv2<span style="color:#f92672">.</span>FILLED)
</span></span><span style="display:flex;"><span>  cv2<span style="color:#f92672">.</span>circle(mask2, cheek2_xy, radius<span style="color:#f92672">=</span><span style="color:#ae81ff">50</span>, color<span style="color:#f92672">=</span>(<span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>), thickness<span style="color:#f92672">=</span>cv2<span style="color:#f92672">.</span>FILLED)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># create a copy for visualisation purposes - show where we copied pixels from</span>
</span></span><span style="display:flex;"><span>  im2_ <span style="color:#f92672">=</span> im2<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>  cv2<span style="color:#f92672">.</span>circle(im2_, cheek1_xy, radius<span style="color:#f92672">=</span><span style="color:#ae81ff">50</span>, color<span style="color:#f92672">=</span>(<span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>))
</span></span><span style="display:flex;"><span>  cv2<span style="color:#f92672">.</span>circle(im2_, cheek2_xy, radius<span style="color:#f92672">=</span><span style="color:#ae81ff">50</span>, color<span style="color:#f92672">=</span>(<span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  dst <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>seamlessClone(np<span style="color:#f92672">.</span>uint8(im2), im, mask1, cheek1_xy, cv2<span style="color:#f92672">.</span>NORMAL_CLONE)
</span></span><span style="display:flex;"><span>  dst <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>seamlessClone(np<span style="color:#f92672">.</span>uint8(im2), dst, mask2, cheek2_xy, cv2<span style="color:#f92672">.</span>NORMAL_CLONE)
</span></span><span style="display:flex;"><span>  plt_imshow(im, im2_, dst)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>Here&rsquo;s how the final image looks like:</p>
<p><img loading="lazy" src="/images/opencv/proj1-seamless-cloning-success.png" alt="final seamless cloning"  />
</p>
<p>As you can see, the seamless cloning operations brought a few inaccuracies from
<code>im2</code> however the blush itself is visible and almost natural.</p>
<h3 id="notes">Notes</h3>
<p>You may need to do a few iterations selecting the image to
clone from to find one that looks as you expect. Alternatively if you found one
that you want to use but the blush is not that intense, consider editing it in a
software like <code>gimp</code> to increase it (e.g., by adding a new layer, painting in
it, and setting its opacity to ~60%)</p>
<p>Even though I demonstrated a roughly straight line between the start of this
task and the end result, that really wasn&rsquo;t the case during experimentation.
Operations that you think make sense for a certain task may not, and you may
need to backtrack, think the problem differently, read the course material a few
more times, or even delete the code that you were writing for the
whole day. Might not obvious at that point in time, but this is all part of the
learning process. As you gain experience in this subject you&rsquo;ll start getting a
sense of what operations should be done for each particular class of problems
and hopefully the whole process will start getting smoother.</p>
]]></content:encoded></item><item><title>Linux Code Commentary ... in a nutshell</title><link>https://bergercookie.dev/post/linux-kernel-books/</link><pubDate>Sat, 04 Jul 2020 10:34:21 +0000</pubDate><guid>https://bergercookie.dev/post/linux-kernel-books/</guid><description>I recently got my hands on two books that talk about the Linux Kernel. These are the Linux Kernel in a Nutshell, and LINUX Core Kernel Commentary.
These books are rather old, so some bits are outdated, but don&amp;rsquo;t let this fact discourage you. Both can be super useful and can definitely help you learn more about how the Kernel works.
Linux Kernel In a Nutshell The first one is a classic.</description><content:encoded><![CDATA[<p>I recently got my hands on two books that talk about the Linux Kernel. These
are the <a href="https://www.amazon.co.uk/Linux-Kernel-Nutshell-OReilly/dp/0596100795">Linux Kernel in a
Nutshell</a>,
and <a href="https://www.amazon.co.uk/Linux-Core-Kernel-Commentary-Knowledge/dp/1576104699">LINUX Core Kernel
Commentary</a>.</p>
<p>These books are rather old, so some bits are outdated, but don&rsquo;t let this fact
discourage you. Both can be super useful and can definitely help you learn more
about how the Kernel works.</p>
<h2 id="linux-kernel-in-a-nutshell">Linux Kernel In a Nutshell</h2>
<p>The first one is a classic. Written by <a href="https://en.wikipedia.org/wiki/Greg_Kroah-Hartman">Greg
Kroah-Hartman</a>, one of the
core Linux Kernel developers (who also took over as the lead of the project
<a href="https://fortune.com/2018/09/17/linux-git-linus-torvalds-bullying-abuse-time-off/">while Torvalds was
away</a> ),
It doesn&rsquo;t require any prior knowledge of Linux (or even programming) and guides
the reader step by step into the process of building and configuring their
kernel from source. Some of its subjects include:</p>
<ul>
<li>How to get the Kernel sources.</li>
<li>How to use <code>kconfig</code>.</li>
<li>A short explanation into the most important <code>kconfig</code> flags as well as
heuristics for when to enable each of them.</li>
<li>Miscellaneous tools that help in building, maintaining and patching your
kernel.</li>
</ul>
<p>What&rsquo;s interesting about this book is that, it will give a short introduction
into each one of the technologies and hardware and the Linux kernel flags for
enabling/disabling support for them. Do you know what <code>SAMBA</code> or <code>SELinux</code> is?
Perhaps confused as to what the <code>lpj</code> or the <code>cachesize</code> CPU options are during
kernel configuration? This book will answer these questions.</p>
<p>This way you can learn about a bunch of components in just 20 pages (see
<code>Chapter 8: Configuration Recipes</code>) without having to jump to different webpages
and having to cross reference the validity of what&rsquo;s you&rsquo;re reading. Here are
some example topics:</p>
<ul>
<li><code>PCI</code> Devices
<ul>
<li><code>SATA</code>, <code>SCSI</code> and <code>IDE</code> Disk Controllers</li>
<li><code>USB</code> Devices</li>
<li>Networking</li>
</ul>
</li>
<li>Filesystems
<ul>
<li>Types of supported filesystems (<code>FAT</code>, <code>CIFS</code>, <code>ZFS</code>)</li>
<li><code>RAID</code></li>
</ul>
</li>
<li><code>CPU</code>s</li>
</ul>
<h2 id="linux-core-kernel-commentary">Linux Core Kernel Commentary</h2>
<p>While the Linux Kernel in a nutshell is a rather lightweight read, this is
definitely not the case with the Linux Core Kernel Commentary. Counting 575 of
awkward landscape A4 pages it includes large chunks of code along with separate
pages with line-by-line explanation of the code.</p>
<p>What you will learn from it:</p>
<ul>
<li>
<p>How to read assembly code</p>
<p>Even if you are unfamiliar going through assembly code, the book does a pretty
good job at explaining how each one of the instructions work as well as offer
alternative implementations of what&rsquo;s you are currently reading in <code>C</code> code.</p>
</li>
<li>
<p>Understand concepts like <em>System Calls</em>, <em>Interrupts</em>, and <em>Virtual Memory</em>. On
top of that it shows you the actual code used in the kernel that implements
these. The latter can be so helpful. It shifts the reader&rsquo;s goal from &ldquo;Let&rsquo;s have
a theoretical discussion about X&rdquo; to &ldquo;Let&rsquo;s get down to the nitty-gritty
details of how X is being done in a real-life production system&rdquo;.</p>
</li>
<li>
<p>How Linux (well, at least its <code>2.3.12</code> version) actually works.</p>
</li>
</ul>
<p>The content can be broken up into two parts. The first half contains the raw
contents of <code>C</code> and Assembly files from the kernel in a two-column format. The
second half contains the corresponding commentary for the selected files.</p>
<p>Based on these files, the book analyses the following subjects:</p>
<ul>
<li>Kernel Architecture Overview and Design Goals</li>
<li>System Initializataion (What happens on system boot)</li>
<li>System Calls (<code>system_call</code> and <code>lcall7</code>)</li>
<li>Signals and Interrupts and Time</li>
<li>Processes and Threads (Process Representation, Scheduling)</li>
<li>Memory (Virtual Memory, Paging, Memory Mapping)</li>
<li>IPC (Message Queues, Semaphores, Shared Memory)</li>
<li>Symmetric Multiprocessing</li>
<li>Tunable Kernel Parameters</li>
</ul>
<p>Here&rsquo;s an example view of the code presented in the book (file:
<code>include/asm-i386/siginfo.h</code>).</p>
<p><img loading="lazy" src="/images/linux-code-view.png" alt="linux-code-view"  />
</p>
<p>The black arrow on the right side indicates the page to go for a more in-depth
explanation.  Here are the contents of the explanation pages:</p>
<p><img loading="lazy" src="/images/linux-explanation-view.png" alt="linux-explanation-view"  />
</p>
<p>It includes some introductory content about Interrupts and Signals and then it
goes line-by-line to explain what the purpose of the code is, what <code>struct</code>s it
uses etc.</p>
<h2 id="conclusions">Conclusions</h2>
<p>Get both of them and at least have them in your bookcase. They are pretty cheap
on &lt;amazon.co.uk&gt; and especially &ldquo;Linux Kernel in a Nutshell&rdquo; you can read
through it in a day or so (obviously allocate more time if you want to follow
along and explore the config parameters discussed). Regarding the &ldquo;Core Kernel
Commentary&rdquo; I don&rsquo;t expect to study it cover-to-cover, but it looks like a good
resource for picking a particular subject and learning as much as possible about
it.</p>
]]></content:encoded></item><item><title>Scratchpad - Create multi-ISO USBs with Easy2boot</title><link>https://bergercookie.dev/post/easy2boot/</link><pubDate>Tue, 10 Mar 2020 20:00:00 +0000</pubDate><guid>https://bergercookie.dev/post/easy2boot/</guid><description>Easy2boot is a utility that allows you to flash a USB with multiple bootable images. This gives you the option of always carrying a variety of OSes / tools for all sorts of different scenarios (debugging using a Rescue image / gparted live, install Ubuntu / Windows 10 etc. images)
Here are the contents of a E2B USB stick that I tend to carry with me and use on a regular basis.</description><content:encoded><![CDATA[<p><a href="https://www.easy2boot.com/">Easy2boot</a> is a utility that allows you to flash a USB with multiple bootable
images. This gives you the option of always carrying a variety of OSes / tools
for all sorts of different scenarios (debugging using a Rescue image / gparted
live, install Ubuntu / Windows 10 etc. images)</p>
<p>Here are the contents of a E2B USB stick that I tend to carry with me and use on
a regular basis.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>berger on draken in /me/berger/EASY2BOOT
</span></span><span style="display:flex;"><span>at [14:00:22] ➜ tree \_ISO/LINUX/
</span></span><span style="display:flex;"><span>\_ISO/LINUX/
</span></span><span style="display:flex;"><span>├── android-x86_64-7.1-rc2.isodefault
</span></span><span style="display:flex;"><span>├── archlinux-2017.12.01-x86_64.isodefault
</span></span><span style="display:flex;"><span>├── gparted-live-1.1.0-1-amd64.isodefault
</span></span><span style="display:flex;"><span>├── kali-linux-light-2018.4-amd64.isodefault
</span></span><span style="display:flex;"><span>├── krd.isodefault
</span></span><span style="display:flex;"><span>├── lxle_16.04.3_64.isodefault
</span></span><span style="display:flex;"><span>├── TinyCore-current.isodefault
</span></span><span style="display:flex;"><span>├── ubuntu-18.04.1.0-live-server-amd64.isodefault
</span></span><span style="display:flex;"><span>└── ubuntu-18.04.1-desktop-amd64.isodefault
</span></span></code></pre></div>
<h2 id="setting-up---adding-a-linux-iso">Setting up - Adding a Linux ISO</h2>
<ul>
<li>Download from here: <a href="https://www.fosshub.com/Easy2Boot.html">https://www.fosshub.com/Easy2Boot.html</a></li>
<li>Extract the Easy2Boot Linux archive - run the docs/linux_utils/fmt.sh script to format the USB device
<ul>
<li>Make sure you select the right drive. Bash script doesn&rsquo;t look very well
written and by default it picked my internal drive!</li>
</ul>
</li>
<li>Copy your .iso files to MAINMENU or LINUX</li>
<li>Rename the .iso to .isodefault</li>
<li>Defrag the USB device:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo perl /media/berger/EASY2BOOT/<span style="color:#ae81ff">\_</span>ISO/docs/linux_utils/defragfs /media/berger/EASY2BOOT/ -f</span></span></code></pre></div>
<h2 id="articlestutorials">Articles/Tutorials</h2>
<ul>
<li><a href="http://www.easy2boot.com/make-an-easy2boot-usb-drive/make-using-linux/">Basic tutorial</a></li>
</ul>
<h2 id="notes">Notes</h2>
<p>Try to use the same scripts for formatting / defragging that you used during the
initial USB flashing. There are compabilitity issues between the different
versions of the tool. If you don&rsquo;t have the original downloaded zip / contents
anymore, it might be worth it reflashing the USB and copying over the images to
the newly created partition instead.</p>
]]></content:encoded></item><item><title>Scratchpad - LSD - A colorful ls alternative</title><link>https://bergercookie.dev/post/lsd/</link><pubDate>Tue, 10 Mar 2020 20:00:00 +0000</pubDate><guid>https://bergercookie.dev/post/lsd/</guid><description>Intro lsd is an alternative to the classic ls UNIX tool. It shows you a listing of files, directories, links, named pipes etc. The difference to its predecessor is that it makes use of Glyph-rich fonts such as Nerd Fonts as well as an abundance of colors preconfigured and available from start.
Troubleshooting &amp;amp; How-to &amp;ldquo;Permission denied&amp;rdquo; when root or $LD_PRELOAD error on a gtk3-related library You&amp;rsquo;ve probably installed lsd via snap.</description><content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p><a href="https://github.com/Peltoche/lsd">lsd</a> is an alternative to the classic <code>ls</code>
UNIX tool. It shows you a listing of files, directories, links, named pipes etc.
The difference to its predecessor is that it makes use of Glyph-rich fonts such
as <a href="https://github.com/ryanoasis/nerd-fonts">Nerd Fonts</a> as well as an abundance
of colors preconfigured and available from start.</p>
<h2 id="troubleshooting--how-to">Troubleshooting &amp; How-to</h2>
<h3 id="permission-denied-when-root-or-ld_preload-error-on-a-gtk3-related-library">&ldquo;Permission denied&rdquo; when root or <code>$LD_PRELOAD</code> error on a <code>gtk3</code>-related library</h3>
<p>You&rsquo;ve probably installed lsd via <code>snap</code>. Don&rsquo;t; Either build it from source
or install it with <code>apt</code>.</p>
<h3 id="use-lsd-and-redirect-its-output">Use <code>lsd</code> and redirect its output</h3>
<p>You might notice that when redirecting lsd output to e.g., a file, lsd
detects that its output is not actually a terminal and turns off coloring
and glyphs. Most of the time that&rsquo;s the correct behavior, otherwise it would
pollute the output file with escape characters for the colors. However if
you still want to keep colors and glyphs on, here&rsquo;s how you would do it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ls --tree --icon always --color always | less -r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Or if piping to a file</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ls --tree --icon always --color always | tee -a output-file</span></span></code></pre></div>
]]></content:encoded></item><item><title>Using Albert to boost your productivity</title><link>https://bergercookie.dev/post/albert-plugins/</link><pubDate>Mon, 23 Dec 2019 15:28:00 +0000</pubDate><guid>https://bergercookie.dev/post/albert-plugins/</guid><description>I&amp;rsquo;ve lately been very active developing plugins for the Albert launcher for many parts of my daily routine. For those of you that don&amp;rsquo;t know it, Albert is an application launcher for Linux. It&amp;rsquo;s written in C++ and its GUI is built on top of Qt. The current post is a short summary of the plugins I&amp;rsquo;ve implemented to automate parts of my current routine and maximise my productivity along with advise and, hopefully, useful information on how to do the same for your needs via Albert.</description><content:encoded><![CDATA[<p>I&rsquo;ve lately been very active developing plugins for the
<a href="https://albertlauncher.github.io/">Albert</a> launcher for many parts of my daily
routine.
For those of you that don&rsquo;t know it, Albert is an application launcher for
Linux. It&rsquo;s written in C++ and its GUI is built on top of Qt. The current post
is a short summary of the plugins I&rsquo;ve implemented to automate parts of my
current routine and maximise my productivity along with advise and, hopefully,
useful information on how to do the same for your needs via Albert.</p>
<p>If you want to extend Albert&rsquo;s capabilities you basically have two options:</p>
<ul>
<li>Implement a native Albert plugin in C++. For this you have to clone the
Albert repository, implement and compile your plugin along with the overall
repo.</li>
<li>Alternatively you can write a <a href="https://albertlauncher.github.io/docs/extensions/python/">python
extension</a>. The
latter can be developed separately from the main Albert repo and can be
enabled/disabled via an option in the application settings. This goes
without saying that, if you&rsquo;re comfortable with Python and you&rsquo;re willing to
sacrifice a tiny bit of performance when the plugin is running, then this
should be your go-to choice.</li>
</ul>
<p>In my case, I followed the latter approach and in the last ~3 months I implemented a
series of plugins to automate parts of my daily routine. All the plugins as well
as the overall content of this article can be found in the
<a href="https://github.com/bergercookie/awesome-albert-plugins">awesome-albert-plugins
repo</a>. Following is a
list of the plugins I implemented, along with a short description of what each
plugin does:</p>
<ul>
<li>
<p><a href="https://www.atlassian.com/software/jira">Jira</a>: Mark tickets as in-progress/under-code-review/done, do fuzzy search on
their title, navigate to the corresponding ticket page</p>
</li>
<li>
<p><a href="https://taskwarrior.org/">Taskwarrior</a>: Interact with taskwarrior - fuzzy search on title, change status
of task</p>
</li>
<li>
<p><a href="https://www.zoopla.co.uk/">Zoopla</a> - Search Property to Buy, Rent, House Prices</p>
</li>
<li>
<p><a href="https://xkcd.com/">Xkcd</a> - Fetch xkcd comics  - do fuzzy search on title</p>
</li>
<li>
<p><a href="https://maps.google.com">Google Maps</a> - Fetch instructions from/to a specific place, optionally via
specific transportation means</p>
</li>
<li>
<p>Suggestions-enabled search for various websites using
<a href="https://github.com/jarun/googler">googler</a>. For example:</p>
<p>Google
Amazon
Youtube
Github
Ebay
IMDB
&hellip;</p>
</li>
</ul>
<p>Here are some demo pictures of these plugins:</p>
<p>| <img loading="lazy" src="/images/albert-demos/albert-suggestions-demo2.gif" alt=""  />
 | <img loading="lazy" src="/images/albert-demos/albert-suggestions-demo.gif" alt=""  />
 |
| <img loading="lazy" src="/images/albert-demos/albert-suggestions-demo3.gif" alt=""  />
 | <img loading="lazy" src="/images/albert-demos/taskwarrior-demo.gif" alt=""  />
 |
| <img loading="lazy" src="/images/albert-demos/xkcd-demo.gif" alt=""  />
 | <img loading="lazy" src="/images/albert-demos/youtube-demo.gif" alt=""  />
 |</p>


<br/>
<center>
<img src="/images/albert-demos/demo-fuzzy-search-title.png">
<br/>
Do a fuzzy search of your assigned JIRA tickets
</center>
<br/>
<center>
<img src="/images/albert-demos/search_plugins.png">
<br/>
View of many suggestions-enabled saerch plugins
</center>

<p>Since I spent a good deal of time writing these plugins, I figured I could share
some of my conclusions, shortcuts into writing a new plugin for your own
usecases:</p>
<ul>
<li>
<p>Use <a href="https://cookiecutter.readthedocs.io/en/latest/">cookiecutter</a> to minimise
the boilerplate code for your new plugin. The former uses the
<a href="https://www.palletsprojects.com/p/jinja/">Jinja</a> templating language to
substitute placeholder values in the contents of files and in the names of the
files and directories.
Here&rsquo;s the <a href="https://github.com/bergercookie/awesome-albert-plugins/tree/master/cookiecutter">cookiecutter
package</a>
layout that I have been using for spawning new Albert plugins:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>    cookiecutter/
</span></span><span style="display:flex;"><span>    ├── cookiecutter.json
</span></span><span style="display:flex;"><span>    ├── <span style="color:#f92672">{{</span>cookiecutter.plugin_name<span style="color:#f92672">}}</span>
</span></span><span style="display:flex;"><span>    │   ├── __init__.py
</span></span><span style="display:flex;"><span>    │   ├── install-plugin.sh
</span></span><span style="display:flex;"><span>    │   ├── misc
</span></span><span style="display:flex;"><span>    │   │   └── demo.gif
</span></span><span style="display:flex;"><span>    │   └── README.md
</span></span><span style="display:flex;"><span>    └── README.md
</span></span><span style="display:flex;"><span>  </span></span></code></pre></div>
<p>And here are the modifiable variables when creating a new plugin:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;author&#34;</span>: <span style="color:#e6db74">&#34;Nikos Koukis&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;plugin_name&#34;</span>: <span style="color:#e6db74">&#34;albert_plugin&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;parent_repo_url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/bergercookie/awesome-albert-plugins&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;repo_base_url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/bergercookie/awesome-albert-plugins/blob/master/plugins/&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;download_url_base&#34;</span>: <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/bergercookie/awesome-albert-plugins/master/plugins/{{ cookiecutter.plugin_name }}/&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;plugin_short_description&#34;</span>: <span style="color:#e6db74">&#34;Some title for your plugin&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;albert_plugin_interface&#34;</span>: <span style="color:#e6db74">&#34;v0.2&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;0.1.0&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  </span></span></code></pre></td></tr></table>
</div>
</div>
</li>
<li>
<p>Give the user an easy way of raising issues and bugs</p>
<p>When using an albert plugin (or a general-purpose python script) many things
can go wrong at runtime (HTTP connection errors, filesystem errors etc.).
Moreover, the potential plugin user may be running albert on the background,
without having access to the corresponding pseudoterminal it was launched
from. This is why, in case of an error, the plugin will silently fail. Here&rsquo;s
a snippet of code that I&rsquo;ve been using so that errors are not left unnoticed
as well as an easy way for the user to report the bug:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#f92672">import</span> traceback
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> query<span style="color:#f92672">.</span>isTriggered:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># whatever your pugin does goes here</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span>:  <span style="color:#75715e"># user to report error</span>
</span></span><span style="display:flex;"><span>          results<span style="color:#f92672">.</span>insert(
</span></span><span style="display:flex;"><span>              <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>              v0<span style="color:#f92672">.</span>Item(
</span></span><span style="display:flex;"><span>                  id<span style="color:#f92672">=</span>__prettyname__,
</span></span><span style="display:flex;"><span>                  icon<span style="color:#f92672">=</span>icon_path,
</span></span><span style="display:flex;"><span>                  text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Something went wrong! Press [ENTER] to copy error and report it&#34;</span>,
</span></span><span style="display:flex;"><span>                  actions<span style="color:#f92672">=</span>[
</span></span><span style="display:flex;"><span>                      v0<span style="color:#f92672">.</span>ClipAction(
</span></span><span style="display:flex;"><span>                          <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Copy error - report it to </span><span style="color:#e6db74">{</span>__homepage__[<span style="color:#ae81ff">8</span>:]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>                          <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>traceback<span style="color:#f92672">.</span>format_exc()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>                      )
</span></span><span style="display:flex;"><span>                  ],
</span></span><span style="display:flex;"><span>              ),
</span></span><span style="display:flex;"><span>          )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> results
</span></span><span style="display:flex;"><span>  </span></span></code></pre></td></tr></table>
</div>
</div>
<p>Now, in case an exception is raised during runtime, the user is greeted with
the following message:</p>
<p><img loading="lazy" src="/images/albet-plugin-error-msg.png" alt="albert-error-message"  />
</p>
<p>And when pressing ENTER, the appropriate ISSUES page URL is copied to the
clipboard.</p>
</li>
<li>
<p>Have a setup phase for checking that all the requirements for your plugin are
in place</p>
<p>In case more setup steps are required (e.g., login credentials)  that can
happen as part of the first albert plugin run(s). In my case, I&rsquo;ve been using
a <code>setup</code> function called at the start of the plugin that checks that all the
requirements are in-place before actually going through the main plugin
functionality. Here&rsquo;s a sample of how the setup phase works for the JIRA
plugin:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> query<span style="color:#f92672">.</span>isTriggered:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>          results_setup <span style="color:#f92672">=</span> setup(query)
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> results_setup:
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">return</span> results_setup
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># setup OK.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          user <span style="color:#f92672">=</span> load_data(<span style="color:#e6db74">&#34;user&#34;</span>)
</span></span><span style="display:flex;"><span>          server <span style="color:#f92672">=</span> load_data(<span style="color:#e6db74">&#34;server&#34;</span>)
</span></span><span style="display:flex;"><span>          api_key <span style="color:#f92672">=</span> load_api_key()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">setup</span>():
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> shutil<span style="color:#f92672">.</span>which(<span style="color:#e6db74">&#34;pass&#34;</span>):
</span></span><span style="display:flex;"><span>        results<span style="color:#f92672">.</span>append(
</span></span><span style="display:flex;"><span>            v0<span style="color:#f92672">.</span>Item(
</span></span><span style="display:flex;"><span>                id<span style="color:#f92672">=</span>__prettyname__,
</span></span><span style="display:flex;"><span>                icon<span style="color:#f92672">=</span>icon_path,
</span></span><span style="display:flex;"><span>                text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;&#34;pass&#34; is not installed.&#39;</span>,
</span></span><span style="display:flex;"><span>                subtext<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Please install and configure &#34;pass&#34; accordingly.&#39;</span>,
</span></span><span style="display:flex;"><span>                actions<span style="color:#f92672">=</span>[
</span></span><span style="display:flex;"><span>                    v0<span style="color:#f92672">.</span>UrlAction(<span style="color:#e6db74">&#39;Open &#34;pass&#34; website&#39;</span>, <span style="color:#e6db74">&#34;https://www.passwordstore.org/&#34;</span>)
</span></span><span style="display:flex;"><span>                ],
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> results
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># user</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> user_path<span style="color:#f92672">.</span>is_file():
</span></span><span style="display:flex;"><span>        results<span style="color:#f92672">.</span>append(
</span></span><span style="display:flex;"><span>            v0<span style="color:#f92672">.</span>Item(
</span></span><span style="display:flex;"><span>                id<span style="color:#f92672">=</span>__prettyname__,
</span></span><span style="display:flex;"><span>                icon<span style="color:#f92672">=</span>icon_path,
</span></span><span style="display:flex;"><span>                text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Please specify your email address for JIRA&#34;</span>,
</span></span><span style="display:flex;"><span>                subtext<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Fill and press [ENTER]&#34;</span>,
</span></span><span style="display:flex;"><span>                actions<span style="color:#f92672">=</span>[v0<span style="color:#f92672">.</span>FuncAction(<span style="color:#e6db74">&#34;Save user&#34;</span>, <span style="color:#66d9ef">lambda</span>: save_data(query<span style="color:#f92672">.</span>string, <span style="color:#e6db74">&#34;user&#34;</span>))],
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> results
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># password (same for API key)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> server_path<span style="color:#f92672">.</span>is_file():
</span></span><span style="display:flex;"><span>        results<span style="color:#f92672">.</span>append(
</span></span><span style="display:flex;"><span>            v0<span style="color:#f92672">.</span>Item(
</span></span><span style="display:flex;"><span>                id<span style="color:#f92672">=</span>__prettyname__,
</span></span><span style="display:flex;"><span>                icon<span style="color:#f92672">=</span>icon_path,
</span></span><span style="display:flex;"><span>                text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Please specify the JIRA server to connect to&#34;</span>,
</span></span><span style="display:flex;"><span>                subtext<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Fill and press [ENTER]&#34;</span>,
</span></span><span style="display:flex;"><span>                actions<span style="color:#f92672">=</span>[
</span></span><span style="display:flex;"><span>                    v0<span style="color:#f92672">.</span>FuncAction(
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;Save JIRA server&#34;</span>, <span style="color:#66d9ef">lambda</span>: save_data(query<span style="color:#f92672">.</span>string, <span style="color:#e6db74">&#34;server&#34;</span>)
</span></span><span style="display:flex;"><span>                    )
</span></span><span style="display:flex;"><span>                ],
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> results
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">save_data</span>(data: str, data_name: str):
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;&#34;&#34;Save a piece of data in the configuration directory.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">with</span> open(config_path <span style="color:#f92672">/</span> data_name, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>          f<span style="color:#f92672">.</span>write(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">load_data</span>(data_name) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;&#34;&#34;Load a piece of data from the configuration directory.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">with</span> open(config_path <span style="color:#f92672">/</span> data_name, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>          data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readline()<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split()[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> data
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  </span></span></code></pre></td></tr></table>
</div>
</div>
<p>Thus, in this case, on the fist run, the user will have to write their
username and server on the albert prompt, which will be saved in appropriate
files, and in the following 2 plugin runs, the plugin will check that their
password and API key can be appropriately found using the Pass
password manager.</p>
</li>
<li>
<p>Give the user an easy way of installing the plugin.</p>
<p>Along with each new albert plugin, I&rsquo;ve been adding (again generating it via
cookiecutter) an <code>install-plugin.sh</code> script that sets up all the plugin
dependencies via either the system package manager (e.g., <code>apt-get</code>) or the
language package manager
(i.e., <code>pip</code>) and also copies the plugin directory to the local albert modules
installation, i.e.: <code>~/.local/share/albert/org.albert.extension.python/</code>.</p>
</li>
</ul>
<p>That&rsquo;s all for now. Let me know if this has been helpful or has given you any
inspiration for making your own extensions.</p>
]]></content:encoded></item><item><title>🛠️ Scratchpad - CV Applications II Course by OpenCV</title><link>https://bergercookie.dev/post/opencv-applications-ii/</link><pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/post/opencv-applications-ii/</guid><description>Computer Vision Applications using OpenCV Facial Landmark Detection Improve the speed of Facial Landmark Detection: Use face detection that comes with OS - if possible (e.g., Android, iOS) Skip frames - e.g,. run every 3 frames Downscale image, detect faces there &amp;hellip; then propagate bboxes to original image (dividing the coordinates by the scale used for resizing the original frame.). Then just do landmark detection on original image and computed bounding box Improve landmark stabilisation Weighted Moving Average - Average the landmark point location over a small time window Kalman Filtering Optical Flow Code snippets OpenCV - Rescale an image - keep ratio import cv2 # Load image img = cv2.</description><content:encoded><![CDATA[<h1 id="computer-vision-applications-using-opencv">Computer Vision Applications using OpenCV</h1>
<h2 id="facial-landmark-detection">Facial Landmark Detection</h2>
<h3 id="improve-the-speed-of-facial-landmark-detection">Improve the speed of Facial Landmark Detection:</h3>
<ol>
<li>Use face detection that comes with OS - if possible (e.g., Android, iOS)</li>
<li>Skip frames - e.g,. run every 3 frames</li>
<li>Downscale image, detect faces there &hellip; then propagate bboxes to original image
(dividing the coordinates by the scale used for resizing the original frame.). Then just do landmark detection on
original image and computed bounding box</li>
</ol>
<h3 id="improve-landmark-stabilisation">Improve landmark stabilisation</h3>
<ol>
<li><strong>Weighted Moving Average</strong> - Average the landmark point location over a small time window</li>
<li>Kalman Filtering</li>
<li>Optical Flow</li>
</ol>
<h2 id="code-snippets">Code snippets</h2>
<h3 id="opencv---rescale-an-image---keep-ratio">OpenCV - Rescale an image - keep ratio</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> cv2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Load image</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>img <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>imread(<span style="color:#e6db74">&#34;&lt;path-to-img&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Scale down - keep ratio</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dims <span style="color:#f92672">=</span> img<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>ratio <span style="color:#f92672">=</span> dims[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">/</span> dims[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target_x <span style="color:#f92672">=</span> <span style="color:#ae81ff">960</span> <span style="color:#75715e"># resolution - x</span>
</span></span><span style="display:flex;"><span>target_y <span style="color:#f92672">=</span> int(<span style="color:#ae81ff">960</span> <span style="color:#f92672">/</span> ratio)
</span></span><span style="display:flex;"><span>imgS <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>resize(img, (target_x, target_y))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cv2<span style="color:#f92672">.</span>namedWindow(<span style="color:#e6db74">&#39;windowname&#39;</span>, cv2<span style="color:#f92672">.</span>WINDOW_NORMAL) <span style="color:#75715e"># Create window with freedom of dimensions</span>
</span></span><span style="display:flex;"><span>cv2<span style="color:#f92672">.</span>imshow(<span style="color:#e6db74">&#39;windowname&#39;</span>, imgS)
</span></span><span style="display:flex;"><span>cv2<span style="color:#f92672">.</span>waitKey(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># Display the image infinitely until any keypress</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># in case you want to kill the window</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cv2<span style="color:#f92672">.</span>destroyAllWindows()</span></span></code></pre></div>
<h3 id="opencv---imshow-but-keep-it-until-esc-pressed">OpenCV - imshow but keep it until <!-- raw HTML omitted --> pressed</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> cv2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">imshow</span>\_(winname: str, img):
</span></span><span style="display:flex;"><span>cv2<span style="color:#f92672">.</span>imshow(winname, img)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        k <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>waitKey()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> k <span style="color:#f92672">==</span> <span style="color:#ae81ff">27</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cv2<span style="color:#f92672">.</span>destroyWindow(winname)()</span></span></code></pre></div>
<h2 id="hints--tricks">Hints &amp; Tricks</h2>
<ul>
<li><code>dlib::faceDetector</code> is trained on 80x80 faces. If the faces in your images
are less than that then you need to upscale before running the detection.</li>
<li><code>dlib::landmarkDetector</code>: Paper says it runs in 1ms</li>
<li>dlib -&gt; RGB, OpenCV -&gt; BGR. Thus for OpenCV -&gt; dlib: <code>cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</code></li>
</ul>
<h2 id="useful-links">Useful Links</h2>
<ul>
<li><a href="http://dlib.net/">dlib</a></li>
<li><a href="https://github.com/cmusatyalab/openface">OpenFace</a></li>
<li><a href="https://melgor.github.io/blcv.github.io/static/2017/12/28/demystifying-face-recognition-iii-face-preprocessing">Demystifying Face Recognition: Face Alignment</a>
<ul>
<li>So we were not able to confirm that using aligned images for model learned on cropped faces boost the accuracy.</li>
</ul>
</li>
<li><a href="https://docs.opencv.org/master/d4/d13/tutorial_py_filtering.html">OpenCV - Python filtering operations</a></li>
</ul>
]]></content:encoded></item><item><title>🛠️ Scratchpad - Machine Learning</title><link>https://bergercookie.dev/post/machine-learning/</link><pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/post/machine-learning/</guid><description>Definition: The science/art of programming computers so that they can learn from data
Popular ML Algorithms Linear &amp;amp; Polynomial Regression Logistic Regression k-nearest Neighbors Support Vector machines Decision Trees Random Forests Ensemble methods Neural Networks Architectures Feedforward Neural Nets Convolutional Nets Recurrent Nets Long short-term memory (LSTM) nets Autoencoders Multi-Layer Perceptons (MLPs) Famous Papers Machine Learning on handwritten digits - 2006 - &amp;lt;www.cs.toronto.edu/~hinton&amp;gt; The Unreasonable Effectiveness of Data - 2009 Useful links - resources www.</description><content:encoded><![CDATA[<blockquote>
<p><strong>Definition:</strong> The science/art of <em>programming computers</em> so that they can
learn from data</p>
</blockquote>
<h2 id="popular-ml-algorithms">Popular ML Algorithms</h2>
<ul>
<li>Linear &amp; Polynomial Regression</li>
<li>Logistic Regression</li>
<li>k-nearest Neighbors</li>
<li>Support Vector machines</li>
<li>Decision Trees</li>
<li>Random Forests</li>
<li>Ensemble methods</li>
</ul>
<h2 id="neural-networks-architectures">Neural Networks Architectures</h2>
<ul>
<li>Feedforward Neural Nets</li>
<li>Convolutional Nets</li>
<li>Recurrent Nets</li>
<li>Long short-term memory (LSTM) nets</li>
<li>Autoencoders</li>
<li>Multi-Layer Perceptons (MLPs)</li>
</ul>
<h2 id="famous-papers">Famous Papers</h2>
<ul>
<li>Machine Learning on handwritten digits - 2006 - &lt;www.cs.toronto.edu/~hinton&gt;</li>
<li>The Unreasonable Effectiveness of Data - 2009</li>
</ul>
<h2 id="useful-links---resources">Useful links - resources</h2>
<ul>
<li><a href="https://www.kaggle.com/">www.kaggle.com/</a>
<ul>
<li>Competitions</li>
<li>Datasets</li>
<li>Kernels</li>
</ul>
</li>
<li>OpenAI Gym
<ul>
<li>For reinforcement learning</li>
</ul>
</li>
<li>scikit-learn user guide</li>
<li>Dataquest - <a href="https://www.dataquest.io">www.dataquest.io</a></li>
<li>deep learning website - <a href="http://deeplearning.net">http://deeplearning.net</a></li>
<li>Imperial College Course
<ul>
<li><a href="https://www.deeplearningmathematics.com/slides-materials/">https://www.deeplearningmathematics.com/slides-materials/</a></li>
<li><a href="https://github.com/pukkapies/dl-imperial-maths">https://github.com/pukkapies/dl-imperial-maths</a></li>
</ul>
</li>
<li>Machine Learning - The Complete Guide <a href="https://en.wikipedia.org/wiki/Book:Machine_Learning_%E2%80%93_The_Complete_Guide">https://en.wikipedia.org/wiki/Book:Machine_Learning_%E2%80%93_The_Complete_Guide</a></li>
<li><a href="https://paperswithcode.com/">https://paperswithcode.com/</a></li>
</ul>
<h2 id="hands-on-machine-learning-book">Hands-On Machine Learning Book</h2>
<p>For the DL part see [Deep Learning]</p>
<h2 id="pandas--sklearn--numpy--scipy-cheatsheet">Pandas / Sklearn / Numpy / Scipy Cheatsheet</h2>
<p><code>dt.describe()</code> → statistics about each column (count, mean, min, max 25% 50% etc.)
<code>dt.info()</code> → info about dataframe (dtype index, column dtypes, not-null values, memory usage)
<code>dt[&quot;a_col&quot;].value_counts()</code> → get all the values encountered in the column
<code>dt.corr()</code> → Compute standard correlation coefficient for potential <em>linear</em> correlations</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pandas.plotting <span style="color:#f92672">import</span> scatter_matrix
</span></span><span style="display:flex;"><span>scatter_matrix(dt, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">8</span>))</span></span></code></pre></div>
<p>Apply a function to a dataframe: either <code>dt.apply</code> or <code>dt.where(... , inplace=True)</code></p>
<p>Use the <em>viridis</em> color palette: color-blind-friendly and prints better on greyscale!</p>
<p><a href="https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html">https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html</a></p>
<h3 id="sklearn---fill-missing-values-in-a-dataset">SkLearn - fill missing values in a dataset:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.preprocessing <span style="color:#f92672">import</span> Imputer
</span></span><span style="display:flex;"><span>imputer <span style="color:#f92672">=</span> Imputer(strategy<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;median&#34;</span>)
</span></span><span style="display:flex;"><span>imputer<span style="color:#f92672">.</span>fit(dt) <span style="color:#75715e"># dt must have numerical values only</span></span></span></code></pre></div>
<h4 id="strategies">Strategies:</h4>
<ul>
<li>Get rid of corresponding districts</li>
<li>Get rid of the whole attribute</li>
<li>Set the values to some value (zero, mean, median, etc.)</li>
</ul>
<p>Pandas/SkLearn: Convert a string column/category to nums</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dt_encoded, dt_categories <span style="color:#f92672">=</span> dt.factorize<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># OR Use One-Hot Encoding - each string in the string category becomes a</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># separate attribute</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sklearn.preprocessing.OneHotEncoder</span></span></code></pre></div>
<p>Get Numpy dense array from Scipy sparse matrix: <code>sparse_mat.toarray()</code></p>
<h4 id="feature-scaling">Feature Scaling</h4>
<p>Machine Learning algorithms don&rsquo;t perform well when the input numerical
attributes have very different scales.</p>
<ul>
<li>min-max scaling / normalization</li>
<li>standardization</li>
</ul>
<h3 id="definitions">Definitions</h3>
<p>Attribute: A data type (e.g., Mileage)
Feature: Attribute + its value</p>
<h4 id="deep-neural-network">Deep Neural Network</h4>
<p>LTU: Neuron, a Sum using weights -&gt; z = w1x1 + w2x2 + &hellip; + wnxn (w^Tx), gives
out a step function -&gt; e.g., Heaviside</p>
<p>Perceptron -&gt; single Layer of LTUs, Each neuron is connected to all input. The
enuron&rsquo;s are also fed an extra bias feature x0 = 1 (<code>bias neuron</code>)</p>
<p><code>Passthrough Input Layer</code>: Inputs are represented by <em>neurons</em> that just
propagate the input to the output</p>
<p>Activation function (<code>activation_fn</code>): The function that evaluates the neuron
inputs and dicides on the triggering of the neuron</p>
<p><code>ReLU or Rectifier or Ramp</code> -&gt; <code>max(0, z)</code></p>
<p>Hint: The derivative of ReLU is the <code>Heaviside</code> and of the SmoothReLU the
<code>logistic function</code></p>
<h4 id="deep-learning-theorems">Deep Learning Theorems</h4>
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/Universal_approximation_theorem">Universal Approximation Theorem</a></p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/No_free_lunch_theorem%3E">No Free Lunch Theorem</a></p>
<p>Any two optimization algorithms are equivalent when their performance is
averaged across all possible problems</p>
</li>
</ul>
<h2 id="faq">FAQ</h2>
<ul>
<li>How do I tune the hyperparameters of my model?
<ul>
<li>Grid search with cross-validation to find the right hyperparameters</li>
<li>Randomised search</li>
<li>Use Oscar - <a href="http://oscar.calldesk.ai/">http://oscar.calldesk.ai/</a>
<ul>
<li>It helps to have an idea of what values are reasonable for each
hyperparameter!</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>🛠️ Scratchpad - ROS1</title><link>https://bergercookie.dev/post/ros-faq/</link><pubDate>Sun, 13 Oct 2019 15:00:00 +0000</pubDate><guid>https://bergercookie.dev/post/ros-faq/</guid><description>A scratchpad for common pitfalls, commands, and shortcuts when using ROS1.
Questions/Answers Set an argument based on the exclusive OR of two other arguments This is a really ugly hack, but it gets the job done. Since we don&amp;rsquo;t care much about the name, we set it so that if the user provides both of them at the same time, they get a descriptive message back.
&amp;lt;!-- arg1 XOR arg2 --&amp;gt; &amp;lt;arg if=&amp;#34;$(eval (arg1 !</description><content:encoded><![CDATA[<p>A scratchpad for common pitfalls, commands, and shortcuts when using ROS1.</p>
<h2 id="questionsanswers">Questions/Answers</h2>
<h3 id="set-an-argument-based-on-the-exclusive-or-of-two-other-arguments">Set an argument based on the exclusive OR of two other arguments</h3>
<p>This is a really ugly hack, but it gets the job done. Since we don&rsquo;t care much
about the name, we set it so that if the user provides both of them at the same
time, they get a descriptive message back.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- arg1 XOR arg2 --&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;arg</span> <span style="color:#a6e22e">if=</span><span style="color:#e6db74">&#34;$(eval (arg1 != &#39;&#39;) == (arg2 != &#39;&#39;))&#34;</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;Please_Set_Exclusively_Either_Arg1_Or_Arg2&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;arg</span> <span style="color:#a6e22e">if=</span><span style="color:#e6db74">&#34;$(eval (arg1 != &#39;&#39;) == (arg2 != &#39;&#39;))&#34;</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;dummy&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;$(arg Please_Set_Exclusively_Either_Arg1_Or_Arg2)&#34;</span><span style="color:#f92672">/&gt;</span></span></span></code></pre></div>
<h3 id="set-a-parameter-based-on-an-environment-variable-fallback-to-a-default">Set a parameter based on an environment variable, fallback to a default</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;launch&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;arg</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;mydefault&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;kalimera&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;arg</span> <span style="color:#a6e22e">if=</span><span style="color:#e6db74">&#34;$(eval optenv(&#39;KALIMERA&#39;) != &#39;&#39;)&#34;</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;kalimera&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;$(env KALIMERA)&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;arg</span> <span style="color:#a6e22e">unless=</span><span style="color:#e6db74">&#34;$(eval optenv(&#39;KALIMERA&#39;) != &#39;&#39;)&#34;</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;kalimera&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;$(arg mydefault)&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;param</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;kalimera&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;$(arg kalimera)&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/launch&gt;</span></span></span></code></pre></div>
<h3 id="how-to-debug-launchfile-execution">How to debug launchfile execution</h3>
<p>See the following CLI arguments</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>--wait
</span></span><span style="display:flex;"><span>Delay the launch <span style="color:#66d9ef">until</span> a roscore is detected.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>--local
</span></span><span style="display:flex;"><span>Launch of the local nodes only. Nodes on remote machines will not be run.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>--screen
</span></span><span style="display:flex;"><span>Force all node output to screen. Useful <span style="color:#66d9ef">for</span> node debugging.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>--log
</span></span><span style="display:flex;"><span>Force all node output to log file. Also useful <span style="color:#66d9ef">for</span> node debugging.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>-v
</span></span><span style="display:flex;"><span>Enable verbose printing. Useful <span style="color:#66d9ef">for</span> tracing roslaunch file parsing.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>--dump-params
</span></span><span style="display:flex;"><span>Print parameters in launch file in YAML format.</span></span></code></pre></div>
<h3 id="roslaunch-conditional-arg">Roslaunch conditional <!-- raw HTML omitted --></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;include</span> <span style="color:#a6e22e">file=</span><span style="color:#e6db74">&#34;...&#34;</span> <span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;arg</span> <span style="color:#a6e22e">if=</span><span style="color:#e6db74">&#34;$(arg var1)&#34;</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;var&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;value&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;arg</span> <span style="color:#a6e22e">unless=</span><span style="color:#e6db74">&#34;$(arg var1)&#34;</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;var&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;value2&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/include&gt;</span></span></span></code></pre></div>
<h3 id="visualise-topicsservicesimages-etc-from-the-command-line-without-xopengl">Visualise topics/services/images etc from the command line (without X/OpenGL):</h3>
<p>Use <a href="https://github.com/dheera/rosshow">rosshow</a></p>
<h3 id="kill-rosgazebo-related-processes">Kill ros/gazebo related processes</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ps -ef | grep -E ros<span style="color:#ae81ff">\|</span>melodic | awk <span style="color:#e6db74">&#39;{print 2}&#39;</span> | xargs kill -9</span></span></code></pre></div>
<h3 id="how-do-i-debug-a-urdf-file-and-its-transforms">How do I debug a URDF file and its transforms?</h3>
<p>Use the urdfdom tools (independent package)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt-get install liburdfdom-tools graphviz
</span></span><span style="display:flex;"><span>urdf_to_graphiz &lt;path-to-your-urdf</span></span></code></pre></div>
<p>You can also use the <code>xacro</code> package and the <code>check_urdf</code> tool:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rosrun xacro xacro.py <span style="color:#e6db74">`</span>rospack find pr2_description<span style="color:#e6db74">`</span>/robots/pr2.urdf.xacro -o /tmp/pr2.urdf
</span></span><span style="display:flex;"><span>check_urdf pr2.urdf</span></span></code></pre></div>
<h3 id="error-creation-of-publisher-failed-unknown-error-handler-name-rosmsg">[ERROR]: Creation of publisher failed: unknown error handler name &lsquo;rosmsg&rsquo;</h3>
<p>There is a bug in <code>genpy</code> for version &lt;= 0.6.13, try <code>apt-get upgrade</code>-ing it</p>
<p><a href="https://answers.ros.org/question/360537/unknown-error-handler-name-rosmsg/?answer=360643#post-id-360643">Source</a></p>
<h3 id="error-rqt-doesnt-list-plugins-on-startup">Error: <code>RQT doesn't list plugins on startup</code>:</h3>
<p>Remove its cache, then it works: <code>rm ~/.config/ros.org/rqt_gui.ini</code></p>
<p><a href="https://answers.ros.org/question/91231/rqt-plugin-not-listedfound-in-list-returned-by-rqt-list-plugins/">Source</a></p>
<h3 id="im-getting-the-following-error-multiple-files-named--in-package">I&rsquo;m getting the following error: <code>multiple files named ... in package</code></h3>
<p>Disable install space.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>catkin clean
</span></span><span style="display:flex;"><span>catkin build &lt;package-name&gt; --no-install</span></span></code></pre></div>
<h3 id="run-catkin-for-the-package-in-the-current-directory">Run catkin for the package in the current directory:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>catkin build --this -DCMAKE...</span></span></code></pre></div>
<h3 id="publish-to-move_base_simplegoal">Publish to <code>/move_base_simple/goal</code>:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rostpic pub /move_base_simple/goal geometry_msgs/PoseStamped <span style="color:#e6db74">&#39;{header: {stamp: now, frame_id: &#34;map&#34;}, pose: {position: {x: 1.0, y: 0.0, z: 0.0}, orientation: {w: 1.0}}}&#39;</span></span></span></code></pre></div>
<p><a href="https://answers.ros.org/question/47973/publishing-to-move_base_simplegoal/">Source</a></p>
<h3 id="image_transport-plugins---how-to-setup">image_transport plugins - how to setup:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install ros-melodic-<span style="color:#ae81ff">\*</span>-image-transport
</span></span><span style="display:flex;"><span>rosrun image_transport republish compressed /in/compressed:<span style="color:#f92672">=</span>/&lt;path-to-topic&gt;/compressed_image0 <span style="color:#e6db74">&#34;raw&#34;</span> out:<span style="color:#f92672">=</span>/&lt;path-to-topic&gt;/image0</span></span></code></pre></div>
<p><a href="http://wiki.ros.org/image_transport/Tutorials/ManagingPlugins">Source</a></p>
<h3 id="use-ninja-when-building-with-catkin_make">Use <code>ninja</code> when building with <code>catkin_make</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>catkin_make --use-ninja --cmake-args -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span>Release</span></span></code></pre></div>
<h3 id="adjust-logger-verbosity---inspect-debug-messages">Adjust logger verbosity - inspect &ldquo;debug&rdquo; messages:</h3>
<p>Run the rqt_logger_level GUI:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rosrun rqt_logger_level rqt_logger_level</span></span></code></pre></div>
<p>Alternatively adjust it using the service call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rosservice list
</span></span><span style="display:flex;"><span>rosservice call /rviz_123/get_loggers &lt;tab&gt;&lt;tab&gt;
</span></span><span style="display:flex;"><span>rosservice call /rviz_123/set_logger_level &lt;tab&gt;&lt;tab&gt;</span></span></code></pre></div>
<h3 id="adjust-the-logger-verbosity-from-the-start-of-the-run">Adjust the logger verbosity from the start of the run</h3>
<p>Define your own <code>ROSCONSOLE_CONFIG_FILE</code> variable + config file.</p>
<p><code>rosconsole</code> will load a config file from <code>$ROS_ROOT/config/rosconsole.config</code>
when it initializes.</p>
<p><code>rosconsole</code> also lets you define your own configuration file that will be
used by <code>log4cxx,</code> defined by the <code>ROSCONSOLE_CONFIG_FILE</code> environment variable.
Anything defined in this config file will override the default config file.</p>
<p>A simple example:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># Set the default ros output to warning and higher

log4j.logger.ros=WARN

# Override my package to output everything

log4j.logger.ros.my_package_name=DEBUG</code></pre>
<h3 id="list-all-available-plugins-of-a-particular-package">List all available plugins of a particular package</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rospack plugins --attrib<span style="color:#f92672">=</span>plugin nav_core</span></span></code></pre></div>
<p>See also: <a href="http://wiki.ros.org/pluginlib">http://wiki.ros.org/pluginlib</a></p>
<h3 id="have-detailed-output-for-debugging">Have detailed output for debugging</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Try one of the following</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export ROSCONSOLE_FORMAT<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;[${severity}] [${time}]: ${message}&#39;</span> <span style="color:#75715e"># default</span>
</span></span><span style="display:flex;"><span>export ROSCONSOLE_FORMAT<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;${severity} | ${time} | ${message}&#39;</span>
</span></span><span style="display:flex;"><span>export ROSCONSOLE_FORMAT<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;${severity} | ${node} | ${time} | ${message} | ${file}:${line}&#39;</span>
</span></span><span style="display:flex;"><span>export ROSCONSOLE_FORMAT<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;${severity} | ${node} - ${thread} | ${time} | ${message} | +${line} ${file}&#39;</span></span></span></code></pre></div>
<h3 id="ros-unittesting">ROS Unittesting</h3>
<p>If you use only <code>gtest</code> then you have to add your target like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">catkin*</span>add_gtest(<span style="color:#e6db74">UT*</span><span style="color:#f92672">${</span>PROJECT_NAME<span style="color:#f92672">}</span> <span style="color:#e6db74">test/test_file.cpp</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">...</span>)</span></span></code></pre></div>
<p>However, if you also use <code>gmock</code> then you should use <code>catkin_add_gmock</code> instead!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">catkin*</span>add_gmock(<span style="color:#e6db74">UT*{PROJECT_NAME}</span> <span style="color:#e6db74">test/test_file.cpp</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">...</span>)</span></span></code></pre></div>
<p>To run all the tests:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>catkin_make run_tests</span></span></code></pre></div>
<p>Notice that the previous call will return a 0 (success) error code in any case
even if the tests fail.</p>
<p>To get a summary and get the appropriate error code you can either run <code>catkin_test_results</code>
or the <code>CTest</code> target <code>test</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>catkin_make test</span></span></code></pre></div>
<p>Source: <a href="https://github.com/ros/catkin/issues/576">https://github.com/ros/catkin/issues/576</a></p>
<h3 id="get-all-ros-topics-programmatically">Get all ROS topics programmatically</h3>
<p>Query the master; from C++ use something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;ros/master.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">// see /opt/ros/&lt;ros-version&gt;/include/ros/master.h for more details on this
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// struct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>ros<span style="color:#f92672">::</span>master<span style="color:#f92672">::</span>V_TopicInfo allTopics;
</span></span><span style="display:flex;"><span>ros<span style="color:#f92672">::</span>master<span style="color:#f92672">::</span>getTopics(allTopics);</span></span></code></pre></div>
<p><a href="https://answers.ros.org/question/256251/how-to-obtain-list-of-all-available-topics-python/?answer=256260#post-id-256260">Source</a></p>
<h3 id="remap-a-topic-in-the-same-tf-tree">Remap a topic in the same TF Tree</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;node</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;remapper&#34;</span> <span style="color:#a6e22e">pkg=</span><span style="color:#e6db74">&#34;tf_remapper_cpp&#34;</span> <span style="color:#a6e22e">type=</span><span style="color:#e6db74">&#34;tf_remap&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;rosparam</span> <span style="color:#a6e22e">param=</span><span style="color:#e6db74">&#34;mappings&#34;</span><span style="color:#f92672">&gt;</span>[{old: /slamcore/map, new: /kalimera}]<span style="color:#f92672">&lt;/rosparam&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;param</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;old_tf_topic_name&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;/tf&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;param</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;new_tf_topic_name&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;/tf&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/node&gt;</span></span></span></code></pre></div>
<h2 id="more-useful-links">More Useful links</h2>
<ul>
<li><a href="http://wiki.ros.org/ROS/EnvironmentVariables">Environment variables</a></li>
<li><a href="http://wiki.ros.osuosl.org/turtlebot_navigation/Tutorials/Autonomously%20navigate%20in%20a%20known%20map">ROS1 Turtlebot navigation tutorial</a></li>
</ul>
<h2 id="reps-of-interest">REPs of interest</h2>
<blockquote>
<p>REP stands for ROS Enhancement Proposal. A REP is a design document providing
information to the ROS community, or describing a new feature for ROS or its
processes or environment.</p>
</blockquote>
<ul>
<li><a href="https://www.ros.org/reps/rep-0117.html">REP-117</a>:
<ul>
<li>Readings too close to measure -&gt; <code>-Inf</code></li>
<li>Invalid measurements -&gt; <code> NaN</code></li>
<li>Readings of no return -&gt; <code>+Inf</code></li>
</ul>
</li>
<li><a href="https://www.ros.org/reps/rep-0118.html">REP-118</a>
<ul>
<li>Representing depth data</li>
<li>Use 32-bit Float</li>
</ul>
</li>
<li><a href="https://www.ros.org/reps/rep-0105.html">REP-105</a>
<ul>
<li>Frames of reference convention</li>
<li><a href="https://answers.ros.org/question/226916/rep-105-and-robot_localization/">Relevant answer with rationale</a></li>
</ul>
</li>
</ul>
<h2 id="ros-ecosystem---miscellaneous-tools">ROS Ecosystem - Miscellaneous Tools</h2>
<ul>
<li><a href="https://github.com/chvmp/champ">champ</a>: ROS packages for Quadruped Robot
based on MIT Cheetah I</li>
<li><a href="https://colcon.readthedocs.io/">colcon</a>: CLI Tool to improve the workflow of
building, testing, and using multiple packages - Default build orchestrator
for ROS2</li>
<li><a href="https://github.com/dirk-thomas/vcstool">vcstool</a>: VCS Designed to facilitate
working with multiple repositories</li>
<li><a href="https://github.com/dirk-thomas/publish-python">publish-python</a>: Python script
to publish your python code to Github Release / PyPI, etc. or generate a
debian package</li>
</ul>
<h2 id="tf-tree---precision">TF Tree - Precision</h2>
<p>It seems that the transforms published in the TF tree (both in ROS1 and ROS2)
are accurate up to millimetres. This means that If I publish a transform
translation like <code>[0.123456789,0.0,0.0]</code> it will appear like <code>[0.123,0.0,0.0]</code>
when I read it using <code>tf tf_echo</code> or <code>tf2_ros tf2_echo</code> from the command line.</p>
<h2 id="a-mental-model-of-the-ros1-navigation-stack">A Mental Model of the ROS1 Navigation Stack</h2>



<iframe width='853' height='480' src='https://embed.coggle.it/diagram/X_RHf8i-aSUjoDBC/52e6ca4d6ae2dd1300c5b307f5cab849719310cd4f7942502e35fc9eafc486ef' frameborder='0' allowfullscreen></iframe>


]]></content:encoded></item><item><title>My daily workflow and tools</title><link>https://bergercookie.dev/post/daily-workflow/</link><pubDate>Sat, 18 May 2019 15:28:00 +0000</pubDate><guid>https://bergercookie.dev/post/daily-workflow/</guid><description>As this is my first actual post I thought I&amp;rsquo;d write about something I&amp;rsquo;m a big fun of, tooling. More specifically I want to describe my workflow when working or in general when using my machine.
My general goal is to be productive in my day-to-day routine, and automate everything that can actually be automated so that I can focus on the higher-level tasks I&amp;rsquo;m interested in. I admit that sometimes I&amp;rsquo;m overdoing it and automate a task that I don&amp;rsquo;t actually have to but all in all I think this attitude has helped me considerably so far.</description><content:encoded><![CDATA[<p>As this is my first actual post I thought I&rsquo;d write about something I&rsquo;m a big
fun of, tooling. More specifically I want to describe my workflow when working
or in general when using my machine.</p>
<p>My general goal is to be productive in my day-to-day routine, and automate
everything that can actually be automated so that I can focus on the
higher-level tasks I&rsquo;m interested in. I admit that sometimes I&rsquo;m overdoing it
and automate a task that I don&rsquo;t actually have to but all in all I think this
attitude has helped me considerably so far.</p>
<p>I&rsquo;m also a big believer in open-source. I&rsquo;m striving to publish all my coding
projects on Github (see my <a href="https://github.com/bergercookie">pinned repos</a> for
some of the works I&rsquo;m proud of) and I&rsquo;ve also been mentoring for the past two
years for the <a href="https://summerofcode.withgoogle.com/">Google Summer of Code Project</a> with the <a href="https://mrpt.org">MRPT robotics
organisation</a>. Thus, I&rsquo;m trying as much as possible to use
open-source alternatives for all my tasks. That being said, if there is a
paid-for tool that does something great I&rsquo;m happy to pay for it (e.g., see the
excellent <code>C/C++ Code Explorer</code> - <a href="https://www.sourcetrail.com/">Sourcetrail</a>).</p>
<p>Here&rsquo;s a bullet list of the software I&rsquo;m using:</p>
<ul>
<li><strong>OS:</strong> GNU/Linux</li>
<li><strong>Linux flavour:</strong> Ubuntu/Debian</li>
<li><strong>Editor:</strong> <a href="https://github.com/neovim/neovim">Vim/Neovim</a></li>
<li><strong>Browser:</strong> Firefox</li>
<li><strong>Terminal:</strong> <a href="https://github.com/jwilm/alacritty">Alacritty</a> + <a href="https://github.com/tmux/tmux">Tmux multiplexer</a> + Bash</li>
<li><strong>Desktop Environment:</strong> <a href="https://i3wm.org/">i3</a></li>
</ul>
<p>Let me now elaborate on the bullets above.</p>
<h2 id="gnulinux---debian-flavours">GNU/Linux - Debian-flavours</h2>
<p>Linux is free, as in freedom, it&rsquo;s ubiquitous and is simply the bestest
operating system there is 😏. Regarding flavour, I simply use Debian or
Ubuntu as the main operating system just because I feel most comfortable in
these systems It&rsquo;s nice know how to open all sorts of files
(<code>xdg-open</code>/<code>xdg-mime</code>) search for package names (<code>apt-cache</code>) install packages
/ download sources (<code>apt-cache</code>, <code>apt-get</code>, <code>dpkg</code>) and in general know how your
system works. Also being a roboticist by profession, there is a strong
inclination towards <code>Debian</code> / <code>Ubuntu</code> since <a href="https://ros.org">ROS</a> (<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>)
ships binaries for specifically for these platforms and it&rsquo;s a total PITA to
compile it from source. Finally I consider it a big deal to always have a stable
system even if that means not compiling your project with the latest and
greatest gcc-8 compiler. Ubuntu and Debian give you that and also provide ways
of installing more recent versions (<a href="http://linuxbrew.sh/">linuxbrew</a>, <a href="https://launchpad.net/ubuntu/+ppas">Ubuntu
PPAs</a>) and hey, you can always compile stuff
from source if the previous don&rsquo;t work for you 😉</p>
<h2 id="vimneovim">Vim/Neovim</h2>
<p>There is a gazillion of articles on how to use vim or what to put in your
<code>vimrc</code> so I&rsquo;m going to keep it short here.</p>
<p>Here are some of the plugins that I use on a daily basis and I&rsquo;m confident have
boosted my editing efficiency significantly. Refer to the corresponding
<code>README</code>s for more details:</p>
<ul>
<li>Plugin manager: <a href="https://github.com/junegunn/vim-plug">vim-plug</a></li>
<li>Asynchronous syntax checking/linting: <a href="https://github.com/w0rp/ale">ale</a></li>
<li>Semantically-accurate syntax highlighting: <a href="https://github.com/arakashic/chromatica.nvim">chromatica</a></li>
<li>Indentation level detection: <a href="https://github.com/ciaranm/detectindent">detectindent</a></li>
<li>Git client: <a href="https://github.com/tpope/vim-fugitive">fugitive</a></li>
<li><code>Printf</code>-like code debugging (<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>): <a href="https://github.com/bergercookie/vim-debugstring">debugstring</a></li>
<li>UNIX helper functions: <a href="https://github.com/tpope/vim-fugitive">eunuch</a></li>
<li>Asynchronous fuzzy searching: <a href="https://github.com/junegunn/fzf.vim">fzf</a></li>
<li>Personal knowledge base /Task management: <a href="https://github.com/vimwiki/vimwiki">vimwiki</a>, <a href="https://github.com/tbabej/taskwiki">taskwiki</a></li>
</ul>
<p>The important thing to note here is that you have to find a combination that
works for you.</p>
<ul>
<li>Don&rsquo;t use more plugins than you actually need or you&rsquo;ll bloat vim and you&rsquo;ll
have awful startup times,</li>
<li>Double-check that adding the plugin is worth the maintenance cost / potential
startup overhead / effort to learn it. Maybe there&rsquo;s already has a way of
expressing it? Maybe it&rsquo;s just a matter of a single function in your <code>.vimrc</code>?</li>
</ul>
<p>Finally, here&rsquo;s a link to my vim configuration in case you want to take a
better look: <a href="https://github.com/bergercookie/vim-dotfiles">vim-dotfiles</a></p>
<h2 id="firefox">Firefox</h2>
<p>Firefox is the de-facto open-source internet browser. It&rsquo;s fast, it&rsquo;s sleek and
using the new Firefox <a href="https://wiki.mozilla.org/WebExtensions">WebExtensions</a>
and <a href="https://github.com/tridactyl/tridactyl">tridactyl</a> one can browse the web
like it&rsquo;s <code>Vim</code> (<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>).</p>
<h2 id="alacrittytmux">Alacritty/Tmux</h2>
<p><code>Alacritty</code> represents a newer trend in terminal emulators in that its objective
is to render the terminal output using the computer GPU. Other than that, its
developers strive to keep it minimal by <strong>not</strong> implementing additional features
such as preferences window GUI (everything is managed by a <code>YAML</code> file) multiple
tabs, split panes etc and instead keep it simple and fast. For most of the
functionality that&rsquo;s omitted (e.g., split panes), they advice the usage of a
tool designed for that such as &hellip; 🥁 Tmux!</p>
<p><code>Tmux</code> is the modern alternative to the good-old <code>screen</code> multiplexer. The big
difference compared to its predecessor is the good list of plugins and
customisation options it gives to its user. It comes with its own plugin manager
<a href="https://github.com/tmux-plugins/tpm">tpm</a> along with plugins such as
<a href="https://github.com/tmux-plugins/tmux-yank">tmux-yank</a>,
<a href="https://github.com/tmux-plugins/tmux-continuum">tmux-continuum</a> , and
<a href="https://github.com/tmux-plugins/tmux-resurrect">tmux-resurrect</a> which
significantly enhance the Tmux user experience.</p>
<p>Finally, I&rsquo;m using <code>Bash</code> for general navigation, system-interaction tasks. Bash
is the default Linux shell, and 99% of Linux machines you encounter will have
it. Yes, I am aware of <code>zsh</code> and the billion of plugins that it offers. In
general it is a superior shell compared to Bash but honestly the difference is
not big enough to counter for the fact that bash is ubiquitous and eventually
you&rsquo;ll be forced to used it when working on a new machine / someone else&rsquo;s
laptop.</p>
<p>Here&rsquo;s my terminal configuration at the time of writing this:</p>
<p><img loading="lazy" src="/images/tmux-view.png" alt="tmux-view"  />
</p>
<h2 id="i3">i3</h2>
<p>i3 is a tiling window manager, meaning that it&rsquo;s designed for placing windows as
individual tiles in your screen(s). Since <code>Tmux</code> does most of the heavy-lifting in
the terminal (splitting to panes, multiple sessions, multiple named windows
etc.). <code>i3</code> gives you (almost) the configurability of a window manager such as
<a href="https://awesomewm.org/">awesome</a> but with much less hassle for configuring it
to reach a version that works.</p>
<p>I use i3 mainly for the following:</p>
<ul>
<li>
<p>Split apps into workspaces. Be able to navigate between workspaces and between
apps using only the mouse</p>
</li>
<li>
<p>Stacked views of windows</p>
</li>
<li>
<p>Automatic placement of a windowed app on startup/launch.</p>
<p>No more shoving windows around when you launch a program. It will
automatically take its place based on the corresponding workspace. You can
do it with simple rules in your i3 config file. For example:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>  <span style="color:#75715e"># assign apps to workspaces</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Firefox&#34;</span><span style="color:#f92672">]</span> $ws_www
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Terminator&#34;</span><span style="color:#f92672">]</span> $ws_term
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Alacritty&#34;</span><span style="color:#f92672">]</span> $ws_term
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Franz&#34;</span><span style="color:#f92672">]</span> $ws_msg
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Viber&#34;</span><span style="color:#f92672">]</span> $ws_msg
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Slack&#34;</span><span style="color:#f92672">]</span> $ws_msg
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;calibre&#34;</span><span style="color:#f92672">]</span> $ws_calibre
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;spotify&#34;</span><span style="color:#f92672">]</span> $ws_music
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Gnome-terminal&#34;</span><span style="color:#f92672">]</span> $ws_fm
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Transmission-gtk&#34;</span><span style="color:#f92672">]</span> $ws_random
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Filezilla&#34;</span><span style="color:#f92672">]</span> $ws_random
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Nautilus&#34;</span><span style="color:#f92672">]</span> $ws_fm
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Pcmanfm&#34;</span><span style="color:#f92672">]</span> $ws_fm
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Vmplayer&#34;</span><span style="color:#f92672">]</span> $ws_win
</span></span><span style="display:flex;"><span>  assign <span style="color:#f92672">[</span>class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vlc&#34;</span><span style="color:#f92672">]</span> $ws_www
</span></span><span style="display:flex;"><span>  </span></span></code></pre></td></tr></table>
</div>
</div>
</li>
<li>
<p>Support for beautiful dock with reasonable configuration and time spent, via
the use of powerline symbols +
<a href="https://github.com/greshake/i3status-rust">i3status-rust</a>. Here is a
sample:</p>
<p><img loading="lazy" src="/images/i3-bar.png" alt="i3-bar"  />
</p>
</li>
</ul>
<h2 id="miscellaneous-unix-related-tooling">Miscellaneous UNIX-related tooling</h2>
<p>This is a list of tools that didn&rsquo;t fit any of the previous categories but are
still worth mentioning:</p>
<ul>
<li>
<p><strong>Password management:</strong> <a href="https://www.passwordstore.org/">UNIX Password Pass</a></p>
<p>I can&rsquo;t emphasise how easy and intuitive password management has been it
since I came across <code>Pass</code>. It&rsquo;s a minimal tool built on top of well
established software such as <code>GPG</code> (for encryption) and <code>Git</code> for version
control. There is also a fully functional android app
<a href="https://github.com/zeapo/Android-Password-Store">PasswordStore</a> that syncs
via git so you can have all your passwords in all your devices and actually
reason on how the whole pipeline actually works.</p>
</li>
<li>
<p><strong>E-Book/Scientific works management:</strong> <a href="https://calibre-ebook.com/">Calibre</a></p>
<p>Calibre is an open-source e-book management tool written in Python. Apart
from its obvious task, it can sync your books with Kindle or android devices
it can import and manage various formats (e.g., <code>pdf</code>, <code>mobi</code>), and it can
also has a pretty decent android client.</p>
</li>
<li>
<p><strong>Personal TODO list - task management:</strong> <a href="https://taskwarrior.org/">Taskwarrior</a></p>
<p>More on this in another post.</p>
</li>
<li>
<p><strong>Linux application Launcher:</strong> <a href="https://albertlauncher.github.io/">Albert</a></p>
</li>
<li>
<p><strong>Fuzzy searching, autocompletion, directory navigation:</strong> <a href="https://github.com/junegunn/fzf">fzf</a></p>
</li>
<li>
<p><strong>Rust-alternatives to classic UNIX tools:</strong>
<a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>, <a href="https://github.com/sharkdp/fd">fd</a></p>
</li>
<li>
<p><strong>Messeging apps bundler:</strong> <a href="https://meetfranz.com">Franz</a></p>
</li>
</ul>
<h2 id="more-on-the-menu---feedback">More on the menu - feedback</h2>
<p>As this is my first post, feel free to add some feedback in the comments and let
me know what you think of this.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Don&rsquo;t know what ROS is? Google it or wait for me to write an article on its latest version <code>ROS2</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Disclaimer: I am the author of vim-debugstring&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I know that Chrome also offers vim-like binding plugins but from my experience with them there&rsquo;s just a world of difference between those and Firefox plugins such as Tridactyl and its predecessors <code>Vimperator</code> / <code>Pentadactyl</code>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><title>Hello world!</title><link>https://bergercookie.dev/post/hello-world/</link><pubDate>Tue, 11 Apr 2017 15:10:19 +0000</pubDate><guid>https://bergercookie.dev/post/hello-world/</guid><description>Hey people, this is the first post in my attempt of a proper Jekyll blog.
Throughout the, not that frequent, posts of mine, I&amp;rsquo;ll be writing about interesting technical stuff; These would be C++, Python, Vim, robotics, Linux (yes, that broad 😊 )
Off we go!</description><content:encoded><![CDATA[<p>Hey people, this is the first post in my attempt of a proper Jekyll blog.</p>
<p>Throughout the, not that frequent, posts of mine, I&rsquo;ll be writing about
interesting technical stuff; These would be C++, Python, Vim, robotics, Linux
(yes, that broad  😊 )</p>
<p>Off we go!</p>
]]></content:encoded></item><item><title/><link>https://bergercookie.dev/projects/tw-gtasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/projects/tw-gtasks/</guid><description>Taskwarrior for Google Tasks Sync The current document describes the Taskwarrior &amp;lt;&amp;gt; GTasks Sync synchronization of syncall. To get the most updated version of this document, head over to the version in the repository
See also the privacy policy for this app
Description Given all tasks in your Google Task task list and the task list of a Taskwarrior filter (combination of tags and projects) synchronise all the addition / modification / deletion events between them.</description><content:encoded><![CDATA[<h1 id="taskwarriorhttpstaskwarriororg-for-google-taskshttpssupportgooglecomtasksanswer7675772-sync"><a href="https://taskwarrior.org/">Taskwarrior</a> for <a href="https://support.google.com/tasks/answer/7675772">Google Tasks</a> Sync</h1>
<p><img loading="lazy" src="/images/meme-tw-gtasks.png" alt=""  />
</p>
<blockquote>
<p>The current document describes the <code>Taskwarrior &lt;&gt; GTasks Sync</code>
synchronization of <a href="https://github.com/bergercookie/syncall"><code>syncall</code></a>. To
get the most updated version of this document, head over to the <a href="https://github.com/bergercookie/syncall/blob/master/readme-tw-gtasks.md">version in
the
repository</a></p>
</blockquote>
<p>See also the <a href="https://bergercookie.dev/tw-gtasks-sync-privacy-policy">privacy policy for this app</a></p>
<h2 id="description">Description</h2>
<p>Given all tasks in your Google Task task list and the task list of a Taskwarrior
<em>filter</em> (combination of tags and projects) synchronise all the addition /
modification / deletion events between them.</p>
<h2 id="demo---populating-a-list-in-google-tasks-view-from-google-calendar">Demo - populating a list in Google Tasks (view from Google Calendar)</h2>
<p><img loading="lazy" src="/images/tw-gtasks-sync/tw_gtasks_sync.gif" alt=""  />
</p>
<h2 id="motivation">Motivation</h2>
<p>While Taskwarrior is an excellent tool when it comes to keeping TODO lists,
keeping track of project goals etc., lacks the portability, simplicity and
minimalistic design of Google Tasks. The latter also has the following
advantages:</p>
<ul>
<li>Automatic sync across all your devices</li>
<li>Comfortable addition/modification of events using voice commands</li>
<li>Actual reminding of events with a variety of mechanisms</li>
</ul>
<h2 id="override-google-tasks-api-key">Override Google Tasks API key</h2>
<p>At the moment the Google Console app that makes use of the Google Tasks API is
still in Testing mode and awaiting approval from Google. This means that if it
raches more than 100 users, the integration may stop working for you. In that
case in order to use this integration you will have to register for your own
developer account with the Google Tasks API with the following steps:</p>
<p>Firstly, removed the <code>~/.gtasks_credentials.pickle</code> file on your system since that
will be reused if found by the app.</p>
<p>For creating your own Google Cloud Developer App:</p>
<ul>
<li>Go to the <a href="tw-gtasks-integration-test">Google Cloud developer console</a></li>
<li>Make a new project</li>
<li>From the sidebar go to <code>API &amp; Services</code> and once there click the <code>ENABLE APIS AND SERVICES</code> button</li>
<li>Look for and Enable the <code>Tasks API</code></li>
</ul>
<p>Your newly created app now has access to the Tasks API. We now have to create
and download the credentials:</p>
<ul>
<li>
<p>Again, from the sidebar under <code>API And Services</code> click <code>Credentials</code></p>
</li>
<li>
<p>In the Google Tasks API screen, click the <code>CREATE CREDENTIALS</code> button.</p>
</li>
<li>
<p>Select the <code>User data</code> radio button (not the <code>Application data</code>).</p>
</li>
<li>
<p>Fill in the <code>OAuth Consent Screen</code> information (shouldn&rsquo;t affect the process)</p>
</li>
<li>
<p>Allow the said credentials to access the following scopes:</p>
<ul>
<li><code>Create, edit, organize, and delete all your tasks</code></li>
<li><code>View your tasks</code></li>
</ul>
</li>
<li>
<p>Create a new <code>OAuth Client ID</code>. Set the type to <code>Desktop App</code> (app name is not
important).</p>
</li>
<li>
<p>Finally download the credentials in JSON form by clicking the download button
as shown below. This is the file you need to point to when running
<code>tw_gtasks_sync</code>.</p>
<p><img loading="lazy" src="misc/gcal-json-btn.png" alt="download-btn"  />
</p>
</li>
</ul>
<p>To specify your custom credentials JSON file use the <code>--google-secret</code> flag as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tw_gtasks_sync -l <span style="color:#e6db74">&#34;&lt;list-name&gt;&#34;</span> -t <span style="color:#e6db74">&#34;&lt;taskwarrior-tag&gt;&#34;</span> --google-secret <span style="color:#e6db74">&#34;&lt;path/to/downloaded/json/file&gt;&#34;</span>
</span></span></code></pre></div><h2 id="usage-examples">Usage Examples</h2>
<p>Run the <code>tw_gtasks_sync</code> to synchronise the Google Tasks list of your choice with
the selected Taskwarrior tag(s). Run with <code>--help</code> for the list of options.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># Sync the +remindme Taskwarrior tag with the Google Tasks list named &#34;TW Reminders&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tw_gtasks_sync --help
</span></span><span style="display:flex;"><span>tw_gtasks_sync -t remindme -l <span style="color:#e6db74">&#34;TW Reminders&#34;</span>
</span></span></code></pre></div><h2 id="installation">Installation</h2>
<h3 id="package-installation">Package Installation</h3>
<p>Install the <code>syncall</code> package from PyPI, enabling the <code>google</code> and <code>tw</code>
extras:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pip3 install syncall<span style="color:#f92672">[</span>google,tw<span style="color:#f92672">]</span>
</span></span></code></pre></div><h2 id="notes-re-this-synchronization">Notes re this synchronization</h2>
<ul>
<li>Currently subtasks of a Google Tasks item are treated as completely
independent of the parent task when converted to Taskwarrior</li>
<li>It&rsquo;s not possible to get the time part of the &ldquo;due&rdquo; field of a task using the
Google Tasks API. Due to this restriction we currently do currently do sync
the date part (without the time) from Google Tasks to Taskwarrior, but in
order not to remove the time part when doing the inverse synchronization, we
don&rsquo;t sync the date at all from Taskwarrior to Google Tasks. More
information in <a href="https://issuetracker.google.com/u/1/issues/128979662">this ticket</a></li>
</ul>
]]></content:encoded></item><item><title/><link>https://bergercookie.dev/tw-gcal-sync-privacy-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/tw-gcal-sync-privacy-policy/</guid><description>Taskwarrior for Google Calendar Sync - Privacy Policy I, Nikos Koukis, built the &amp;ldquo;Taskwarrior for Google Calendar Sync&amp;rdquo; as an Open Source app. This SERVICE is provided by Nikos Koukis at no cost and is intended for use as is.
This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service. Taskwarrior for Google Calendar Sync use and transfer to any other app of information received from Google APIs will adhere to Google API Services User Data Policy, including the Limited Use requirements.</description><content:encoded><![CDATA[<h1 id="taskwarrior-for-google-calendar-sync---privacy-policy">Taskwarrior for Google Calendar Sync - Privacy Policy</h1>
<p><img loading="lazy" src="/images/meme-tw-gcal.png" alt=""  />
</p>
<p>I, Nikos Koukis, built the &ldquo;Taskwarrior for Google Calendar Sync&rdquo; as an Open Source app.
This SERVICE is provided by Nikos Koukis at no cost and is intended for use as
is.</p>
<p>This page is used to inform visitors regarding my policies with the collection,
use, and disclosure of Personal Information if anyone decided to use my Service.
<code>Taskwarrior for Google Calendar Sync</code> use and transfer to any other app of information
received from Google APIs will adhere to <a href="https://developers.google.com/terms/api-services-user-data-policy">Google API Services User Data
Policy</a>,
including the Limited Use requirements.</p>
<h2 id="information-collection-and-use">Information Collection and Use</h2>
<p>I do not collect any information when you are using &ldquo;Taskwarrior for Google
Calendar Sync&rdquo;. The purpose of this app is to synchronise your Taskwarrior tasks
on your local machine with your Google calendar events and is limited to that
particular use.</p>
<p>I do use the
<a href="https://github.com/googleapis/google-api-python-client">google-api-python-client</a>
client however in order to sync your Taskwarrior tasks with your Google Calendar
account and I do not know what data Google collects via that tool and when using
its Google Calendar API. You can find out more about Google&rsquo;s Privacy policy
though at this link:</p>
<p><a href="https://policies.google.com/privacy">https://policies.google.com/privacy</a></p>
<h2 id="google-api-scopes">Google API Scopes</h2>
<p>This app needs access to your <strong>Google Calendar</strong> so that it can add, remove,
and update individual events to synchronise the corresponding <strong>Google Calendar</strong>
list with your local Taskwarrior configuration. Be advised that &ldquo;Taskwarrior for
Google Calendar Sync&rdquo; is not thoroughly tested and may contain bugs which could
result in data loss in your Google Calendar events. You are advised to use a
dedicated calendar, different to your personal one. Remember that you are using
&ldquo;Taskwarrior for Google Calendar Sync&rdquo; at your own risk.</p>
<p>You can read more on how it works, or look at the source code
<a href="https://github.com/bergercookie/syncall">here</a></p>
<h2 id="security">Security</h2>
<p>When using &ldquo;Taskwarrior for Google Calendar Sync&rdquo; to sync Taskwarrior tasks with
Google Calendar events you are using
<a href="https://pypi.org/project/google-auth-oauthlib/">google-auth-oauthlib</a> to handle
the <code>OAuth</code> authentication and
<a href="https://github.com/googleapis/google-api-python-client">google-api-python-client</a>,
and to communicate with the Google Calendar API and make changes to your
personal Google Calendar events. The security of using this application is as
strong as the security of these two packages. Remember though that no method of
transmission over the internet, or method of electronic storage is 100% secure
and reliable, and I cannot guarantee its absolute security.</p>
<h2 id="changes-to-this-privacy-policy">Changes to This Privacy Policy</h2>
<p>I may update our Privacy Policy from time to time. Thus, you are advised to
review this page periodically for any changes. I will notify you of any changes
by posting the new Privacy Policy on this page.</p>
<p>This policy is effective as of 2024-08-15</p>
<h2 id="contact-us">Contact Us</h2>
<p>If you have any questions or suggestions about my Privacy Policy, do not
hesitate to contact me at <a href="mailto:nickkouk@gmail.com">nickkouk@gmail.com</a>.</p>
<p>This privacy policy page was created at
<a href="https://privacypolicytemplate.net">privacypolicytemplate.net</a> and
modified/generated by <a href="https://app-privacy-policy-generator.firebaseapp.com/">App Privacy Policy
Generator</a></p>
]]></content:encoded></item><item><title/><link>https://bergercookie.dev/tw-gtasks-sync-privacy-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/tw-gtasks-sync-privacy-policy/</guid><description>Taskwarrior for GTasks Sync - Privacy Policy I, Nikos Koukis, built the &amp;ldquo;Taskwarrior for GTasks Sync&amp;rdquo; as an Open Source app. This SERVICE is provided by Nikos Koukis at no cost and is intended for use as is.
This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service. Taskwarrior for GTasks Sync use and transfer to any other app of information received from Google APIs will adhere to Google API Services User Data Policy, including the Limited Use requirements.</description><content:encoded><![CDATA[<h1 id="taskwarrior-for-gtasks-sync---privacy-policy">Taskwarrior for GTasks Sync - Privacy Policy</h1>
<p><img loading="lazy" src="/images/meme-tw-gtasks.png" alt=""  />
</p>
<p>I, Nikos Koukis, built the &ldquo;Taskwarrior for GTasks Sync&rdquo; as an Open Source app.
This SERVICE is provided by Nikos Koukis at no cost and is intended for use as
is.</p>
<p>This page is used to inform visitors regarding my policies with the collection,
use, and disclosure of Personal Information if anyone decided to use my Service.
<code>Taskwarrior for GTasks Sync</code> use and transfer to any other app of information
received from Google APIs will adhere to <a href="https://developers.google.com/terms/api-services-user-data-policy">Google API Services User Data
Policy</a>,
including the Limited Use requirements.</p>
<h2 id="information-collection-and-use">Information Collection and Use</h2>
<p>I do not collect any information when you are using &ldquo;Taskwarrior for GTasks
Sync&rdquo;. The purpose of this app is to synchronise your Taskwarrior tasks
on your local machine with your Google Tasks and is limited to that particular
use.</p>
<p>I do use the
<a href="https://github.com/googleapis/google-api-python-client">google-api-python-client</a>
client however in order to sync your Taskwarrior tasks with your Google Tasks
account and I do not know what data Google collects via that tool and when using
its Google Tasks API. You can find out more about Google&rsquo;s Privacy policy
though at this link:</p>
<p><a href="https://policies.google.com/privacy">https://policies.google.com/privacy</a></p>
<h2 id="google-api-scopes">Google API Scopes</h2>
<p>This app needs access to your <strong>Google Tasks</strong> so that it can add, remove,
and update individual tasks to synchronise the corresponding <strong>Google Tasks</strong>
list with your local Taskwarrior configuration. Be advised that &ldquo;Taskwarrior for
GTasks Sync&rdquo; is not thoroughly tested and may contain bugs which could
result in data loss in your Google Tasks lists. You are advised to use a
dedicated Google Tasks list, different to your personal one. Remember that you
are using &ldquo;Taskwarrior for GTasks Sync&rdquo; at your own risk.</p>
<p>You can read more on how it works, or look at the source code
<a href="https://github.com/bergercookie/syncall">here</a></p>
<h2 id="security">Security</h2>
<p>When using &ldquo;Taskwarrior for GTasks Sync&rdquo; to sync Taskwarrior tasks with Google
Tasks you are using
<a href="https://pypi.org/project/google-auth-oauthlib/">google-auth-oauthlib</a> to handle
the <code>OAuth</code> authentication and
<a href="https://github.com/googleapis/google-api-python-client">google-api-python-client</a>,
and to communicate with the Google Tasks API and make changes to your
personal Google Tasks lists. The security of using this application is as strong
as the security of these two packages. Remember though that no method of
transmission over the internet, or method of electronic storage is 100% secure
and reliable, and I cannot guarantee its absolute security.</p>
<h2 id="changes-to-this-privacy-policy">Changes to This Privacy Policy</h2>
<p>I may update our Privacy Policy from time to time. Thus, you are advised to
review this page periodically for any changes. I will notify you of any changes
by posting the new Privacy Policy on this page.</p>
<p>This policy is effective as of 2023-23-12</p>
<h2 id="contact-us">Contact Us</h2>
<p>If you have any questions or suggestions about my Privacy Policy, do not
hesitate to contact me at <a href="mailto:nickkouk@gmail.com">nickkouk@gmail.com</a>.</p>
<p>This privacy policy page was created at
<a href="https://privacypolicytemplate.net">privacypolicytemplate.net</a> and
modified/generated by <a href="https://app-privacy-policy-generator.firebaseapp.com/">App Privacy Policy
Generator</a></p>
]]></content:encoded></item><item><title/><link>https://bergercookie.dev/wedding-el/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/wedding-el/</guid><description>body { background-image: url("/images/maria-nikos-wedding-invitation4.jpg"); background-size: cover; background-position: center; background-color: #000; color: #000; text-align: center; font-family: "Montserrat"; font-size: 2rem; align-items: center; justify-content: center; } h1 { font-size: 48px; margin-top: 30px; margin-bottom: 20px; color: #fa8072; } p { font-size: 24px; margin-bottom: 20px; } a { color: #fa8072; text-decoration: none; } #bottom-right { position: absolute; bottom: 0; right: 0; } #top-right { position: absolute; top: 0; right: 0; } Πάρτυ Γάμου Παντρευόμαστε!</description><content:encoded><![CDATA[<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
  <meta charset="utf-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1.0, user-scalable=yes"
  />
  <head>
    <link
      href="https://fonts.googleapis.com/css2?family=Sacramento&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Pacifico"
      rel="stylesheet"
    />
    <style>
      body {
        background-image: url("/images/maria-nikos-wedding-invitation4.jpg");
        background-size: cover;
        background-position: center;
        background-color: #000;
        color: #000;
        text-align: center;
        font-family: "Montserrat";
        font-size: 2rem;
        align-items: center;
        justify-content: center;
      }
      h1 {
        font-size: 48px;
        margin-top: 30px;
        margin-bottom: 20px;
        color: #fa8072;
      }
      p {
        font-size: 24px;
        margin-bottom: 20px;
      }
      a {
        color: #fa8072;
        text-decoration: none;
      }
      #bottom-right {
        position: absolute;
        bottom: 0;
        right: 0;
      }
      #top-right {
        position: absolute;
        top: 0;
        right: 0;
      }
    </style>
  </head>
  <div style="height: 1em"></div>
  <h1>Πάρτυ Γάμου</h1>
  <body>
    <p>Παντρευόμαστε! 💍🎉🥰</p>
    <p>
      Για να το γιορτάσουμε, σας προσκαλούμε στο πάρτι μας στις
      <em>5 Αυγούστου 2023</em> στο
      <a href="https://goo.gl/maps/Lr9royw5xj8idyXY9">Ergon Agora East</a>
      <span style="font-size: 16px"
        >(Λεωφ. Γεωργικής Σχολής 50, Πυλαία Χορτιάτης 555 35)</span
      >. Ελάτε στις 7:30 μ.μ.
    </p>
    <p>Σας περιμένουμε για να περάσουμε υπέροχα με φαγητό 🌮 και ποτό 🍹!</p>
    <p style="font-family: cursive; font-size: 1em">
      <em>Μαρία Πάντσιου και Νίκος Κούκης</em>
    </p>
    <p style="font-size: 16px">
      <em
        >* Μπορείτε να φέρετε ένα φίλο/φίλη σας. Απλώς ενημερώστε μας για να
        κανονίσουμε αναλόγως.</em
      >
      <br />
      <em>
        ** Αφού περάσετε τα καταστήματα του Ergon και βγείτε στον κήπο, θα
        είμαστε στο βάθος και δεξιά, σε ένα χώρο που ονομάζεται "σινεμά"."
      </em>
    </p>
  </body>
  <div id="top-right" style="font-size: 16px">
    <a href="../wedding">English version 🇬🇧</a>
  </div>
</html>

]]></content:encoded></item><item><title/><link>https://bergercookie.dev/wedding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/wedding/</guid><description>body { background-image: url("/images/maria-nikos-wedding-invitation4.jpg"); background-size: cover; background-position: center; background-color: #000; color: #000; text-align: center; font-family: "Montserrat"; font-size: 2rem; align-items: center; justify-content: center; } h1 { font-size: 48px; margin-top: 30px; margin-bottom: 20px; color: #fa8072; } p { font-size: 24px; margin-bottom: 20px; } a { color: #fa8072; text-decoration: none; } #bottom-right { position: absolute; bottom: 0; right: 0; } #top-right { position: absolute; top: 0; right: 0; } Wedding Party Invite We are getting married!</description><content:encoded><![CDATA[<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
  <meta charset="utf-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1.0, user-scalable=yes"
  />
  <head>
    <link
      href="https://fonts.googleapis.com/css2?family=Sacramento&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Pacifico"
      rel="stylesheet"
    />
    <style>
      body {
        background-image: url("/images/maria-nikos-wedding-invitation4.jpg");
        background-size: cover;
        background-position: center;
        background-color: #000;
        color: #000;
        text-align: center;
        font-family: "Montserrat";
        font-size: 2rem;
        align-items: center;
        justify-content: center;
      }
      h1 {
        font-size: 48px;
        margin-top: 30px;
        margin-bottom: 20px;
        color: #fa8072;
      }
      p {
        font-size: 24px;
        margin-bottom: 20px;
      }
      a {
        color: #fa8072;
        text-decoration: none;
      }
      #bottom-right {
        position: absolute;
        bottom: 0;
        right: 0;
      }
      #top-right {
        position: absolute;
        top: 0;
        right: 0;
      }
    </style>
  </head>
  <div style="height: 1em"></div>
  <h1>Wedding Party Invite</h1>
  <body>
    <p>We are getting married! 💍🎉🥰</p>
    <p>
      To celebrate it, we're inviting you to our post-wedding party on the
      <em>5th of August 2023</em> at
      <a href="https://goo.gl/maps/Lr9royw5xj8idyXY9">Ergon Agora East</a>
      <span style="font-size: 16px"
        >(Leof. Georgikis Scholis 50, Pilea Chortiatis 555 35)</span
      >. Join us at 7:30 PM.
    </p>
    <p>
      Join us for a night of fun 🥳, food 🌮, drinks 🍹 and more! We hope to see
      you there!
    </p>
    <p style="font-family: cursive; font-size: 1em">
      <em>Maria Pantsiou and Nikos Koukis</em>
    </p>
    <p style="font-size: 16px">
      <em
        >* Feel free to bring a +1. Just let us know to arrange accordingly</em
      >
      <br />
      <em>
        ** After passing through Ergon's stores and exiting to the garden, we
        will be towards the back and to the right, in the area called "cinema".
      </em>
    </p>
  </body>

  <div id="top-right" style="font-size: 16px">
    <a href="../wedding-el">Greek version 🇬🇷</a>
  </div>
</html>

]]></content:encoded></item><item><title>Curriculum Vitae</title><link>https://bergercookie.dev/about/resume-view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bergercookie.dev/about/resume-view/</guid><description>resume.pdf resume code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} body { font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; max-width: 800px; margin: auto; background: #FFFFFF; padding: 10px 10px 10px 10px; } h1 { font-size: 55px; color: #757575; text-align:center; margin-bottom:15px; } h2 { color: #397249; } h2:before { content: ""; display: inline-block; margin-right:1%; width: 16%; height: 10px; background-color: #9CB770; } dt { float: left; clear: left; width: 17%; font-weight: bold; } dd { margin-left: 17%; margin-bottom:7px; } p { margin-top:0; margin-bottom:7px; } blockquote { text-align: center } a { text-decoration: none; color: #397249; } a:hover, a:active { background-color: #397249; color: #FFFFFF; text-decoration: none; text-shadow: 1px 1px 1px #333; } hr { color: #A6A6A6; } table { width: 100%; } Nikos Koukis nickkouk@gmail.</description><content:encoded><![CDATA[<section class="attachments ">
  <label>
    <i class="fas fa-paperclip" aria-hidden="true"></i>
    
  </label>
  <div class="attachments-files">
    <li>
      <a href="/about/resume-view.files/resume.pdf">resume.pdf</a>
    </li>
  </div>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>resume</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
   
  
   
  body {
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      max-width: 800px;
      margin: auto;
      background: #FFFFFF;
      padding: 10px 10px 10px 10px;
  }
  
   
  h1 {
      font-size: 55px;
      color: #757575;
      text-align:center;
      margin-bottom:15px;
  }
   
   
   
   
   
  
   
  h2 {
       
      color: #397249;
  }
   
  h2:before {
      content: "";
      display: inline-block;
      margin-right:1%;
      width: 16%;
      height: 10px;
       
      background-color: #9CB770;
  }
   
   
   
   
   
  
   
  dt {
      float: left;
      clear: left;
      width: 17%;
      font-weight: bold;
  }
  dd {
      margin-left: 17%;
      margin-bottom:7px;
  }
  p {
      margin-top:0;
      margin-bottom:7px;
  }
  
   
  blockquote {
      text-align: center
  }
  
   
  a {
      text-decoration: none;
      color: #397249;
  }
  a:hover, a:active {
      background-color: #397249;
      color: #FFFFFF;
      text-decoration: none;
      text-shadow: 1px 1px 1px #333;
  }
  
   
  hr {
      color: #A6A6A6;
  }
  
  table {
      width: 100%;
  }
  </style>
</head>
<body>
<h1 id="nikos-koukis">Nikos Koukis</h1>
<blockquote>
<p><a href="mailto:nickkouk@gmail.com" class="email">nickkouk@gmail.com</a> • <a href="https://bergercookie.dev" target="_blank">bergercookie.dev</a><br />
<a href="https://github.com/bergercookie" target="_blank">Github://bergercookie</a> • <a href="https://www.linkedin.com/in/nikos-koukis/" target="_blank">LinkedIn://nikos-koukis</a> • <a href="http://stackoverflow.com/users/2843583/bergerrcookie" target="_blank">Stackoverflow://bergercookie</a><br />
London - United Kingdom</p>
</blockquote>
<hr />
<blockquote>
<p>I am a passionate Robotics/SLAM Engineer based in London. I love writing code and especially when that code comes into life in actual robots and real-life applications.</p>
</blockquote>
<hr />
<h2 id="professional-experience">Professional Experience</h2>
<dl>
<dt>05/2019 -</dt>
<dd><strong>Robotics Product Engineer - SLAMcore</strong>
</dd>
<dt>01/2019 - 05/2019</dt>
<dd><strong>Robotics Engineer - SLAMcore</strong>
</dd>
<dt>09/2017 - 01/2019</dt>
<dd><p><strong>Junior Robotics Engineer - SLAMcore</strong></p>
<p>I work as a robotics product engineer at SLAMcore. We strive to provide robust and accurate SLAM solutions in Robotics. During my time there I have lead the integration and deployment of our software on multiple robotic platforms, and I have also worked in areas like sensor calibration, autonomous navigation, SLAM algorithms development, continuous integration as well as overall product development and deployment</p>
</dd>
<dt>02/2021 - 07/2021</dt>
<dd><p><strong>Software Developer - Hellenic Army (KEPYES)</strong></p>
<p>As part of my mandatory military service I maintained and implemented new features in large-scale Java and OracleSQL-based server applications. I also was the primary maintainer of legacy Linux-based servers essential for production apps. Create documentation and usage instructions for core components and tools including SVN, Git and Linux.</p>
</dd>
<dt>2017, 2018</dt>
<dd>Mentor at <a href="https://summerofcode.withgoogle.com/" target="_blank">Google Summer of Code (GSoC)</a> with MRPT
</dd>
<dt>2016</dt>
<dd><p>Student at Google Summer of Code (GSoC) with MRPT</p>
<p>Developed an open source implementation of the pose-graphSLAM algorithm with loop closure capabilities (<a href="https://summerofcode.withgoogle.com/archive/2016/projects/6025600208732160/" target="_blank">Project link</a>)</p>
</dd>
</dl>
<h2 id="technical-experience">Technical Experience</h2>
<dl>
<dt>MRPT 2016 -</dt>
<dd><p><strong>Core contributor at <a href="https://github.com/MRPT" target="_blank">Mobile Robot Programming Toolkit (MRPT)</a></strong></p>
<p>MRPT is a open source robotics framework specialized in SLAM and mobile robot applications with over 300+ cites in Google Scholar, 40k+ downloads.</p>
<p>I am the author and maintainer of the single and multi-robot implementations of mrpt-graphslam:</p>
<ul>
<li><a href="https://www.mrpt.org/list-of-mrpt-apps/application-graphslamengine/" target="_blank">mrpt-graphslam</a></li>
<li><a href="http://wiki.ros.org/mrpt_graphslam_2d" target="_blank">mrpt_graphslam_2d</a></li>
</ul>
</dd>
<dt>Languages</dt>
<dd>
</dd>
<dt><em>C++</em></dt>
<dd><p>Very experienced using modern C++ (11, 14, 17 standards) and in working with popular mathematical / computer vision and robotics libraries such as OpenCV, Eigen, MRPT, OpenGV. I have also extensively developed applications in <a href="http://ros.org" target="_blank">ROS</a>, <a href="https://index.ros.org/doc/ros2/" target="_blank">ROS2</a> and have used the <a href="https://gazebosim.org" target="_blank">Gazebo</a> and <a href="http://www.coppeliarobotics.com/" target="_blank">V-REP</a> robotic simulators.</p>
<p><em>Sample projects:</em> <a href="https://github.com/MRPT/mrpt" target="_blank">MRPT</a>, <a href="https://github.com/mrpt-ros-pkg/mrpt_slam/tree/master/mrpt_graphslam_2d" target="_blank">mrpt_slam</a>, <a href="https://github.com/bergercookie/robot-concepts" target="_blank">robot-concepts</a></p>
</dd>
<dt><em>Python</em></dt>
<dd><p>Expert in using either Python2 or Python3 and with using standard modules such as <code>Numpy</code>, <code>Scipy</code>, <code>Pandas</code>. Good knowledge of module such as <code>argparse</code>, <code>click</code>, <code>pyyaml</code>, <code>mechanize</code>. Decent knowledge of <code>scikit-learn</code>, <code>Tensorflow</code>.</p>
<p><em>Sample projects: <a href="https://github.com/bergercookie/taskw_gcal_sync" target="_blank">taskw_gcal_sync</a>, <a href="https://github.com/bergercookie/awesome-albert-plugins" target="_blank">awesome_albert_plugins</a>, <a href="https://github.com/bergercookie/mendeley2calibre" target="_blank">mendeley2calibre</a>, <a href="https://github.com/bergercookie/Pump3000" target="_blank">Pump3000</a></em></p>
</dd>
<dt><em>Vim/Vimscript</em></dt>
<dd>Implemented the <a href="https://github.com/bergercookie/vim-debugstring" target="_blank">vim-debugstring plugin</a> for printf-like debugging in a variety of programming languages.
</dd>
<dt><em>Rust</em></dt>
<dd>I have been experimenting with <a href="https://github.com/bergercookie/slam-rs" target="_blank">Robotics/SLAM-related projects</a> in the Rust programming language.
</dd>
</dl>
<hr />
<dl>
<dt><em>Excellent:</em></dt>
<dd><strong>Docker/Docker-compose</strong>, <strong>Make</strong>, <strong>Bash</strong>, <strong>Modern CMake</strong>, <strong>Git</strong>, <strong>Sed/Grep/Awk</strong>
</dd>
<dt><em>Good:</em></dt>
<dd><strong>C</strong>, <strong>Fortran</strong>, <strong>Matlab</strong>
</dd>
<dt><em>Basic:</em></dt>
<dd><strong>Haskell</strong>, <strong>Awk</strong>, <strong>Java</strong>, <strong>Ansible</strong>, <strong>Django</strong>, <strong>Grafana</strong>
</dd>
</dl>
<hr />
<dl>
<dt>Software:</dt>
<dd><strong>MRPT</strong>, <strong>ROS</strong>, <strong>ROS2</strong>, <strong>Gazebo</strong>, <strong>V-REP</strong>, <strong>Matlab</strong>, <strong>Fusion360</strong>, <strong>Solidworks</strong>, <strong>Grafana</strong>
</dd>
</dl>
<h2 id="education">Education</h2>
<dl>
<dt>2011 - 2017</dt>
<dd><p><strong>5yr Diploma in Mechanical Engineering</strong><br />
National Technical University of Athens (Athens, Greece)</p>
<p><em>Master Thesis: <a href="http://dspace.lib.ntua.gr/handle/123456789/45390" target="_blank">Design and Development of Single and Multi-Robot Simultaneous Localization and Mapping (SLAM) Algorithms</a></em></p>
<p>8.4/10.0</p>
</dd>
<dt>2015</dt>
<dd><p><strong>ERASMUS Studies</strong><br />
KTH Royal Institute of Technology (Stockholm, Sweden)</p>
<p>I studied for a semester in the department of <em>Engineering Science</em> where I undertook projects in advanced control theory, digital control, optimal control, and embedded systems for applications in robotics and aircraft control systems</p>
</dd>
<dt>2013 -</dt>
<dd><strong>Coursera/Udacity/EdX courses</strong><br />
I have successfully completed more than 10 courses in various MOOC platforms including <a href="https://eu.udacity.com/course/artificial-intelligence-for-robotics--cs373" target="_blank">Udacity - Artificial Intelligence for Robotics</a>, <a href="https://mega.nz/#!lu51kLDT!U7EQmJqQ_1GEfeBUexlb27c5lYzu8Par7O5vB40nqtA" target="_blank">Udacity - Control of Mobile Robots</a>, <a href="https://mega.nz/#!t7pBRRwa!EB7ALlSwoOnR-gQiq11Zo4awpHnasczTDKvPve3CygQ" target="_blank">Coursera - Computer Networks</a>.
</dd>
</dl>
<h2 id="supplementary">Supplementary</h2>
<ul>
<li>Penetration Testing Enthusiast</li>
<li><p>Languages:</p>
<ul>
<li>Greek (native speaker)</li>
<li>English</li>
<li>German (basic)</li>
<li>Spanish (basic)</li>
</ul></li>
<li><strong>2014:</strong> 4th place in <a href="https://ebec.best.eu.org/" target="_blank">EBEC</a> competition final round</li>
<li><p><strong>2004:</strong> Avlonarion chess tournament champion</p></li>
</ul>
</body>
</html>


</section>

]]></content:encoded></item></channel></rss>